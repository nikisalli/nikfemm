!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/nik/Desktop/progetti/math/fem/nikfemm/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20220828.0/
$(BIN)showme	lib/nikfemm/lib/triangle/makefile	/^$(BIN)showme: $(SRC)showme.c$/;"	t
$(BIN)triangle	lib/nikfemm/lib/triangle/makefile	/^$(BIN)triangle: $(SRC)triangle.c$/;"	t
$(BIN)triangle.o	lib/nikfemm/lib/triangle/makefile	/^$(BIN)triangle.o: $(SRC)triangle.c $(SRC)triangle.h$/;"	t
$(BIN)tricall	lib/nikfemm/lib/triangle/makefile	/^$(BIN)tricall: $(BIN)tricall.c $(BIN)triangle.o$/;"	t
A	lib/nikfemm/src/matrix/csr.hpp	/^        double* A;$/;"	m	struct:nikfemm::MatCSR	typeref:typename:double *
ADJ	lib/nikfemm/lib/triangle/showme.c	/^#define ADJ /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
Absolute	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Absolute(/;"	d	file:
B	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL B[4], C1[8], C2[12], D[16];$/;"	v	typeref:typename:REAL[4]
B3	lib/nikfemm/lib/triangle/triangle.cpp	/^  INEXACT REAL B3;$/;"	v	typeref:typename:INEXACT REAL
BADSUBSEGPERBLOCK	lib/nikfemm/lib/triangle/triangle.cpp	/^#define BADSUBSEGPERBLOCK /;"	d	file:
BADTRIPERBLOCK	lib/nikfemm/lib/triangle/triangle.cpp	/^#define BADTRIPERBLOCK /;"	d	file:
BIN	lib/nikfemm/lib/triangle/makefile	/^BIN = .\/$/;"	m
BOOST_AUTO_TEST_CASE	lib/nikfemm/test/unit_tests.cpp	/^BOOST_AUTO_TEST_CASE( csr_conjugate_gradient_solve )$/;"	f
BOOST_AUTO_TEST_CASE	lib/nikfemm/test/unit_tests.cpp	/^BOOST_AUTO_TEST_CASE( csr_index )$/;"	f	typeref:typename:csr_tests
BOOST_AUTO_TEST_CASE	lib/nikfemm/test/unit_tests.cpp	/^BOOST_AUTO_TEST_CASE( cv_add )$/;"	f
BOOST_AUTO_TEST_CASE	lib/nikfemm/test/unit_tests.cpp	/^BOOST_AUTO_TEST_CASE( cv_add_scalar )$/;"	f
BOOST_AUTO_TEST_CASE	lib/nikfemm/test/unit_tests.cpp	/^BOOST_AUTO_TEST_CASE( cv_add_scaled )$/;"	f
BOOST_AUTO_TEST_CASE	lib/nikfemm/test/unit_tests.cpp	/^BOOST_AUTO_TEST_CASE( cv_copy )$/;"	f
BOOST_AUTO_TEST_CASE	lib/nikfemm/test/unit_tests.cpp	/^BOOST_AUTO_TEST_CASE( cv_div )$/;"	f
BOOST_AUTO_TEST_CASE	lib/nikfemm/test/unit_tests.cpp	/^BOOST_AUTO_TEST_CASE( cv_div_scalar )$/;"	f
BOOST_AUTO_TEST_CASE	lib/nikfemm/test/unit_tests.cpp	/^BOOST_AUTO_TEST_CASE( cv_dot )$/;"	f
BOOST_AUTO_TEST_CASE	lib/nikfemm/test/unit_tests.cpp	/^BOOST_AUTO_TEST_CASE( cv_mult )$/;"	f
BOOST_AUTO_TEST_CASE	lib/nikfemm/test/unit_tests.cpp	/^BOOST_AUTO_TEST_CASE( cv_mult_scalar )$/;"	f
BOOST_AUTO_TEST_CASE	lib/nikfemm/test/unit_tests.cpp	/^BOOST_AUTO_TEST_CASE( cv_square_sum )$/;"	f
BOOST_AUTO_TEST_CASE	lib/nikfemm/test/unit_tests.cpp	/^BOOST_AUTO_TEST_CASE( cv_sub )$/;"	f
BOOST_AUTO_TEST_CASE	lib/nikfemm/test/unit_tests.cpp	/^BOOST_AUTO_TEST_CASE( cv_sub_scalar )$/;"	f
BOOST_AUTO_TEST_SUITE	lib/nikfemm/test/unit_tests.cpp	/^BOOST_AUTO_TEST_SUITE( cv_tests )$/;"	f	typeref:typename:BOOST_AUTO_TEST_SUITE_END ()
BOOST_TEST_MODULE	lib/nikfemm/test/unit_tests.cpp	/^#define BOOST_TEST_MODULE /;"	d	file:
BOUNDARY_REGION	lib/nikfemm/src/drawing/drawing.hpp	/^#define BOUNDARY_REGION /;"	d
BOUNDARY_VERTICES	lib/nikfemm/include/constants.hpp	/^#define BOUNDARY_VERTICES /;"	d
BUTTONHEIGHT	lib/nikfemm/lib/triangle/showme.c	/^#define BUTTONHEIGHT /;"	d	file:
BUTTONROWS	lib/nikfemm/lib/triangle/showme.c	/^#define BUTTONROWS /;"	d	file:
C1	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL B[4], C1[8], C2[12], D[16];$/;"	v	typeref:typename:REAL[8]
C1length	lib/nikfemm/lib/triangle/triangle.cpp	/^  int C1length, C2length, Dlength;$/;"	v	typeref:typename:int
C2	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL B[4], C1[8], C2[12], D[16];$/;"	v	typeref:typename:REAL[12]
C2length	lib/nikfemm/lib/triangle/triangle.cpp	/^  int C1length, C2length, Dlength;$/;"	v	typeref:typename:int
CC	lib/nikfemm/lib/triangle/makefile	/^CC = cc$/;"	m
CLOCKWISE	lib/nikfemm/src/geometry/geometry_common.hpp	/^        CLOCKWISE,$/;"	e	enum:nikfemm::Orientation
COLLINEAR	lib/nikfemm/src/geometry/geometry_common.hpp	/^        COLLINEAR,$/;"	e	enum:nikfemm::Orientation
COMPILER_ID	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COUNTERCLOCKWISE	lib/nikfemm/src/geometry/geometry_common.hpp	/^        COUNTERCLOCKWISE$/;"	e	enum:nikfemm::Orientation
CSWITCHES	lib/nikfemm/lib/triangle/makefile	/^CSWITCHES = -O -DLINUX -I\/usr\/X11R6\/include -L\/usr\/X11R6\/lib$/;"	m
CV	lib/nikfemm/src/matrix/simple_vector.cpp	/^    CV::CV(uint64_t size) {$/;"	f	class:nikfemm::CV
CV	lib/nikfemm/src/matrix/simple_vector.hpp	/^    struct CV {$/;"	s	namespace:nikfemm
CXX_STD	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#      define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD /;"	d	file:
C_VERSION	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION /;"	d	file:
C_VERSION	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION$/;"	d	file:
C_VERSION	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define C_VERSION /;"	d	file:
Circle	lib/nikfemm/src/geometry/circle.cpp	/^    Circle::Circle() {$/;"	f	class:nikfemm::Circle
Circle	lib/nikfemm/src/geometry/circle.cpp	/^    Circle::Circle(Point center, double radius) {$/;"	f	class:nikfemm::Circle
Circle	lib/nikfemm/src/geometry/circle.hpp	/^    struct Circle {$/;"	s	namespace:nikfemm
D	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL B[4], C1[8], C2[12], D[16];$/;"	v	typeref:typename:REAL[16]
DEADVERTEX	lib/nikfemm/lib/triangle/triangle.cpp	/^#define DEADVERTEX /;"	d	file:
DEC	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DUPLICATEVERTEX	lib/nikfemm/lib/triangle/triangle.cpp	/^                         DUPLICATEVERTEX};$/;"	e	enum:insertvertexresult	file:
Dlength	lib/nikfemm/lib/triangle/triangle.cpp	/^  int C1length, C2length, Dlength;$/;"	v	typeref:typename:int
Drawing	lib/nikfemm/src/drawing/drawing.cpp	/^    Drawing::Drawing() {$/;"	f	class:nikfemm::Drawing
Drawing	lib/nikfemm/src/drawing/drawing.hpp	/^    struct Drawing {$/;"	s	namespace:nikfemm
DrawingRegion	lib/nikfemm/src/drawing/drawing_region.cpp	/^    DrawingRegion::DrawingRegion(Point p, uint64_t region_attribute) {$/;"	f	class:nikfemm::DrawingRegion
DrawingRegion	lib/nikfemm/src/drawing/drawing_region.hpp	/^    struct DrawingRegion {$/;"	s	namespace:nikfemm
DrawingSegment	lib/nikfemm/src/drawing/drawing_segment.hpp	/^        DrawingSegment(uint64_t p1, uint64_t p2) {$/;"	f	struct:nikfemm::DrawingSegment
DrawingSegment	lib/nikfemm/src/drawing/drawing_segment.hpp	/^    struct DrawingSegment {$/;"	s	namespace:nikfemm
EDGE	lib/nikfemm/lib/triangle/showme.c	/^#define EDGE /;"	d	file:
ELE	lib/nikfemm/lib/triangle/showme.c	/^#define ELE /;"	d	file:
EMPTY_NODE	lib/nikfemm/src/mesh/vertex.hpp	/^#define EMPTY_NODE /;"	d
ENCROACHINGVERTEX	lib/nikfemm/lib/triangle/triangle.cpp	/^enum insertvertexresult {SUCCESSFULVERTEX, ENCROACHINGVERTEX, VIOLATINGVERTEX,$/;"	e	enum:insertvertexresult	file:
EPSILON	lib/nikfemm/include/constants.hpp	/^#define EPSILON /;"	d
ElemCOO	lib/nikfemm/src/matrix/coo.hpp	/^    struct ElemCOO {$/;"	s	namespace:nikfemm
FILENAMESIZE	lib/nikfemm/lib/triangle/showme.c	/^#define FILENAMESIZE /;"	d	file:
FILENAMESIZE	lib/nikfemm/lib/triangle/triangle.cpp	/^#define FILENAMESIZE /;"	d	file:
FLIPSTACKERPERBLOCK	lib/nikfemm/lib/triangle/triangle.cpp	/^#define FLIPSTACKERPERBLOCK /;"	d	file:
FREEVERTEX	lib/nikfemm/lib/triangle/triangle.cpp	/^#define FREEVERTEX /;"	d	file:
Fast_Two_Sum	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Fast_Two_Sum(/;"	d	file:
Fast_Two_Sum_Tail	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Fast_Two_Sum_Tail(/;"	d	file:
HEX	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
IA	lib/nikfemm/src/matrix/csr.hpp	/^        uint64_t* IA;$/;"	m	struct:nikfemm::MatCSR	typeref:typename:uint64_t *
ID_VOID_MAIN	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
IMAGE_TYPES	lib/nikfemm/lib/triangle/showme.c	/^#define IMAGE_TYPES /;"	d	file:
INEXACT	lib/nikfemm/lib/triangle/triangle.cpp	/^#define INEXACT /;"	d	file:
INPUTLINESIZE	lib/nikfemm/lib/triangle/showme.c	/^#define INPUTLINESIZE /;"	d	file:
INPUTLINESIZE	lib/nikfemm/lib/triangle/triangle.cpp	/^#define INPUTLINESIZE /;"	d	file:
INPUTVERTEX	lib/nikfemm/lib/triangle/triangle.cpp	/^#define INPUTVERTEX /;"	d	file:
INTRIANGLE	lib/nikfemm/lib/triangle/triangle.cpp	/^enum locateresult {INTRIANGLE, ONEDGE, ONVERTEX, OUTSIDE};$/;"	e	enum:locateresult	file:
INT_PTR	lib/nikfemm/lib/triangle/triangle.cpp	/^#define INT_PTR /;"	d	file:
JA	lib/nikfemm/src/matrix/csr.hpp	/^        uint64_t* JA;$/;"	m	struct:nikfemm::MatCSR	typeref:typename:uint64_t *
LEFTCOLLINEAR	lib/nikfemm/lib/triangle/triangle.cpp	/^enum finddirectionresult {WITHIN, LEFTCOLLINEAR, RIGHTCOLLINEAR};$/;"	e	enum:finddirectionresult	file:
MACHINE_EPSILON	lib/nikfemm/include/constants.hpp	/^#define MACHINE_EPSILON /;"	d
MAXCOLORS	lib/nikfemm/lib/triangle/showme.c	/^#define MAXCOLORS /;"	d	file:
MINHEIGHT	lib/nikfemm/lib/triangle/showme.c	/^#define MINHEIGHT /;"	d	file:
MINWIDTH	lib/nikfemm/lib/triangle/showme.c	/^#define MINWIDTH /;"	d	file:
MU_0	lib/nikfemm/include/constants.hpp	/^#define MU_0 /;"	d
MatCOO	lib/nikfemm/src/matrix/coo.cpp	/^    MatCOO::MatCOO() {$/;"	f	class:nikfemm::MatCOO
MatCOO	lib/nikfemm/src/matrix/coo.hpp	/^    struct MatCOO {$/;"	s	namespace:nikfemm
MatCSR	lib/nikfemm/src/matrix/csr.cpp	/^    MatCSR::MatCSR(MatCOO& coo) {$/;"	f	class:nikfemm::MatCSR
MatCSR	lib/nikfemm/src/matrix/csr.hpp	/^    struct MatCSR {$/;"	s	namespace:nikfemm
Mesh	lib/nikfemm/src/mesh/mesh.cpp	/^    Mesh::Mesh() {$/;"	f	class:nikfemm::Mesh
Mesh	lib/nikfemm/src/mesh/mesh.hpp	/^    struct Mesh {$/;"	s	namespace:nikfemm
NIKBIMAP_H	lib/nikfemm/src/unique_bimap.hpp	/^#define NIKBIMAP_H$/;"	d
NIK_AIJ_HPP	lib/nikfemm/src/matrix/csr.hpp	/^#define NIK_AIJ_HPP$/;"	d
NIK_CIRCLE_HPP	lib/nikfemm/src/geometry/circle.hpp	/^#define NIK_CIRCLE_HPP$/;"	d
NIK_COLUMN_VECTOR_HPP	lib/nikfemm/src/matrix/simple_vector.hpp	/^#define NIK_COLUMN_VECTOR_HPP$/;"	d
NIK_CONSTANTS_H	lib/nikfemm/include/constants.hpp	/^#define NIK_CONSTANTS_H$/;"	d
NIK_COO_HPP	lib/nikfemm/src/matrix/coo.hpp	/^#define NIK_COO_HPP$/;"	d
NIK_DRAWING_HPP	lib/nikfemm/src/drawing/drawing.hpp	/^#define NIK_DRAWING_HPP$/;"	d
NIK_DRAWING_OBJECTS_HPP	lib/nikfemm/src/drawing/drawing_region.hpp	/^#define NIK_DRAWING_OBJECTS_HPP$/;"	d
NIK_DRAWING_SEGMENT_HPP	lib/nikfemm/src/drawing/drawing_segment.hpp	/^#define NIK_DRAWING_SEGMENT_HPP$/;"	d
NIK_GEOMETRY_COMMON_HPP	lib/nikfemm/src/geometry/geometry_common.hpp	/^#define NIK_GEOMETRY_COMMON_HPP$/;"	d
NIK_MESH_HPP	lib/nikfemm/src/mesh/mesh.hpp	/^#define NIK_MESH_HPP$/;"	d
NIK_POINT_HPP	lib/nikfemm/src/geometry/point.hpp	/^#define NIK_POINT_HPP$/;"	d
NIK_SEGMENT_HPP	lib/nikfemm/src/geometry/segment.hpp	/^#define NIK_SEGMENT_HPP$/;"	d
NIK_SIMULATION_H	lib/nikfemm/include/simulation.hpp	/^#define NIK_SIMULATION_H$/;"	d
NIK_VECTOR_HPP	lib/nikfemm/src/geometry/vector.hpp	/^#define NIK_VECTOR_HPP$/;"	d
NIK_VERTEX_HPP	lib/nikfemm/src/mesh/vertex.hpp	/^#define NIK_VERTEX_HPP$/;"	d
NODE	lib/nikfemm/lib/triangle/showme.c	/^#define NODE /;"	d	file:
NOTHING	lib/nikfemm/lib/triangle/showme.c	/^#define NOTHING /;"	d	file:
ONEDGE	lib/nikfemm/lib/triangle/triangle.cpp	/^enum locateresult {INTRIANGLE, ONEDGE, ONVERTEX, OUTSIDE};$/;"	e	enum:locateresult	file:
ONETHIRD	lib/nikfemm/lib/triangle/triangle.cpp	/^#define ONETHIRD /;"	d	file:
ONVERTEX	lib/nikfemm/lib/triangle/triangle.cpp	/^enum locateresult {INTRIANGLE, ONEDGE, ONVERTEX, OUTSIDE};$/;"	e	enum:locateresult	file:
OUTSIDE	lib/nikfemm/lib/triangle/triangle.cpp	/^enum locateresult {INTRIANGLE, ONEDGE, ONVERTEX, OUTSIDE};$/;"	e	enum:locateresult	file:
Orientation	lib/nikfemm/src/geometry/geometry_common.hpp	/^    enum Orientation {$/;"	g	namespace:nikfemm
PANELHEIGHT	lib/nikfemm/lib/triangle/showme.c	/^#define PANELHEIGHT /;"	d	file:
PART	lib/nikfemm/lib/triangle/showme.c	/^#define PART /;"	d	file:
PI	lib/nikfemm/include/constants.hpp	/^#define PI /;"	d
PI	lib/nikfemm/lib/triangle/triangle.cpp	/^#define PI /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
POLY	lib/nikfemm/lib/triangle/showme.c	/^#define POLY /;"	d	file:
Point	lib/nikfemm/src/geometry/point.cpp	/^    Point::Point() {$/;"	f	class:nikfemm::Point
Point	lib/nikfemm/src/geometry/point.cpp	/^    Point::Point(double x, double y) {$/;"	f	class:nikfemm::Point
Point	lib/nikfemm/src/geometry/point.hpp	/^    class Point {$/;"	c	namespace:nikfemm
PredefinedRegion	lib/nikfemm/src/drawing/drawing.hpp	/^        PredefinedRegion(double region_attribute) {$/;"	f	struct:nikfemm::PredefinedRegion
PredefinedRegion	lib/nikfemm/src/drawing/drawing.hpp	/^    struct PredefinedRegion {$/;"	s	namespace:nikfemm
REAL	lib/nikfemm/lib/triangle/showme.c	/^#define REAL /;"	d	file:
REAL	lib/nikfemm/lib/triangle/triangle.cpp	/^#define REAL /;"	d	file:
REAL	lib/nikfemm/lib/triangle/tricall.c	/^#define REAL /;"	d	file:
RIGHTCOLLINEAR	lib/nikfemm/lib/triangle/triangle.cpp	/^enum finddirectionresult {WITHIN, LEFTCOLLINEAR, RIGHTCOLLINEAR};$/;"	e	enum:finddirectionresult	file:
RM	lib/nikfemm/lib/triangle/makefile	/^RM = \/bin\/rm$/;"	m
SAMPLEFACTOR	lib/nikfemm/lib/triangle/triangle.cpp	/^#define SAMPLEFACTOR /;"	d	file:
SAMPLERATE	lib/nikfemm/lib/triangle/triangle.cpp	/^#define SAMPLERATE /;"	d	file:
SEGMENTVERTEX	lib/nikfemm/lib/triangle/triangle.cpp	/^#define SEGMENTVERTEX /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SPLAYNODEPERBLOCK	lib/nikfemm/lib/triangle/triangle.cpp	/^#define SPLAYNODEPERBLOCK /;"	d	file:
SQUAREROOTTWO	lib/nikfemm/lib/triangle/triangle.cpp	/^#define SQUAREROOTTWO /;"	d	file:
SRC	lib/nikfemm/lib/triangle/makefile	/^SRC = .\/$/;"	m
STARTEXPLOSION	lib/nikfemm/lib/triangle/showme.c	/^#define STARTEXPLOSION /;"	d	file:
STARTHEIGHT	lib/nikfemm/lib/triangle/showme.c	/^#define STARTHEIGHT /;"	d	file:
STARTINDEX	lib/nikfemm/lib/triangle/triangle.cpp	/^#define STARTINDEX /;"	d	file:
STARTWIDTH	lib/nikfemm/lib/triangle/showme.c	/^#define STARTWIDTH /;"	d	file:
STRINGIFY	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
SUBSEGPERBLOCK	lib/nikfemm/lib/triangle/triangle.cpp	/^#define SUBSEGPERBLOCK /;"	d	file:
SUCCESSFULVERTEX	lib/nikfemm/lib/triangle/triangle.cpp	/^enum insertvertexresult {SUCCESSFULVERTEX, ENCROACHINGVERTEX, VIOLATINGVERTEX,$/;"	e	enum:insertvertexresult	file:
Segment	lib/nikfemm/src/geometry/segment.cpp	/^    Segment::Segment(Point p1, Point p2) {$/;"	f	class:nikfemm::Segment
Segment	lib/nikfemm/src/geometry/segment.hpp	/^    struct Segment {$/;"	s	namespace:nikfemm
Simulation	lib/nikfemm/include/simulation.hpp	/^    class Simulation {$/;"	c	namespace:nikfemm
Simulation	lib/nikfemm/src/simulation.cpp	/^    Simulation::Simulation() {$/;"	f	class:nikfemm::Simulation
Split	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Split(/;"	d	file:
Square	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Square(/;"	d	file:
Square_Tail	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Square_Tail(/;"	d	file:
TRILIBDEFS	lib/nikfemm/lib/triangle/makefile	/^TRILIBDEFS = -DTRILIBRARY$/;"	m
TRIPERBLOCK	lib/nikfemm/lib/triangle/triangle.cpp	/^#define TRIPERBLOCK /;"	d	file:
TRI_REAL	lib/nikfemm/lib/triangle/triangle.h	/^#define TRI_REAL /;"	d
TempSegment	lib/nikfemm/src/mesh/mesh.cpp	/^        struct TempSegment {$/;"	s	function:nikfemm::Mesh::mesh	file:
Two_Diff	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Two_Diff(/;"	d	file:
Two_Diff_Tail	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Two_Diff_Tail(/;"	d	file:
Two_One_Diff	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Two_One_Diff(/;"	d	file:
Two_One_Product	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Two_One_Product(/;"	d	file:
Two_One_Sum	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Two_One_Sum(/;"	d	file:
Two_Product	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Two_Product(/;"	d	file:
Two_Product_Presplit	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Two_Product_Presplit(/;"	d	file:
Two_Product_Tail	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Two_Product_Tail(/;"	d	file:
Two_Sum	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Two_Sum(/;"	d	file:
Two_Sum_Tail	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Two_Sum_Tail(/;"	d	file:
Two_Two_Diff	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Two_Two_Diff(/;"	d	file:
Two_Two_Sum	lib/nikfemm/lib/triangle/triangle.cpp	/^#define Two_Two_Sum(/;"	d	file:
UNDEADVERTEX	lib/nikfemm/lib/triangle/triangle.cpp	/^#define UNDEADVERTEX /;"	d	file:
UTIL_H	lib/nikfemm/src/triangle/util.h	/^#define UTIL_H$/;"	d
VERTEXPERBLOCK	lib/nikfemm/lib/triangle/triangle.cpp	/^#define VERTEXPERBLOCK /;"	d	file:
VIOLATINGVERTEX	lib/nikfemm/lib/triangle/triangle.cpp	/^enum insertvertexresult {SUCCESSFULVERTEX, ENCROACHINGVERTEX, VIOLATINGVERTEX,$/;"	e	enum:insertvertexresult	file:
VIRUSPERBLOCK	lib/nikfemm/lib/triangle/triangle.cpp	/^#define VIRUSPERBLOCK /;"	d	file:
VOID	lib/nikfemm/lib/triangle/triangle.cpp	/^#define VOID /;"	d	file:
VORO	lib/nikfemm/lib/triangle/showme.c	/^#define VORO /;"	d	file:
Vector	lib/nikfemm/src/geometry/vector.cpp	/^    Vector::Vector() {$/;"	f	class:nikfemm::Vector
Vector	lib/nikfemm/src/geometry/vector.cpp	/^    Vector::Vector(double x, double y) {$/;"	f	class:nikfemm::Vector
Vector	lib/nikfemm/src/geometry/vector.hpp	/^    struct Vector {$/;"	s	namespace:nikfemm
Vertex	lib/nikfemm/src/mesh/vertex.cpp	/^    Vertex::Vertex() {$/;"	f	class:nikfemm::Vertex
Vertex	lib/nikfemm/src/mesh/vertex.cpp	/^    Vertex::Vertex(Point p) {$/;"	f	class:nikfemm::Vertex
Vertex	lib/nikfemm/src/mesh/vertex.cpp	/^    Vertex::Vertex(double x, double y) {$/;"	f	class:nikfemm::Vertex
Vertex	lib/nikfemm/src/mesh/vertex.hpp	/^    class Vertex {$/;"	c	namespace:nikfemm
WITHIN	lib/nikfemm/lib/triangle/triangle.cpp	/^enum finddirectionresult {WITHIN, LEFTCOLLINEAR, RIGHTCOLLINEAR};$/;"	e	enum:finddirectionresult	file:
_0	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL _0;$/;"	v	typeref:typename:REAL
__has_include	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define __has_include(/;"	d	file:
__has_include	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define __has_include(/;"	d	file:
_i	lib/nikfemm/lib/triangle/triangle.cpp	/^  INEXACT REAL _i, _j;$/;"	v	typeref:typename:INEXACT REAL
_j	lib/nikfemm/lib/triangle/triangle.cpp	/^  INEXACT REAL _i, _j;$/;"	v	typeref:typename:INEXACT REAL
abig	lib/nikfemm/lib/triangle/triangle.cpp	/^  INEXACT REAL abig;$/;"	v	typeref:typename:INEXACT REAL
ablen2	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL aclen2, bclen2, ablen2;$/;"	v	typeref:typename:REAL
aclen2	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL aclen2, bclen2, ablen2;$/;"	v	typeref:typename:REAL
aclen2	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL aclen2, bclen2;$/;"	v	typeref:typename:REAL
acx	lib/nikfemm/lib/triangle/triangle.cpp	/^  INEXACT REAL acx, acy, bcx, bcy;$/;"	v	typeref:typename:INEXACT REAL
acxtail	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL acxtail, acytail, bcxtail, bcytail;$/;"	v	typeref:typename:REAL
acy	lib/nikfemm/lib/triangle/triangle.cpp	/^  INEXACT REAL acx, acy, bcx, bcy;$/;"	v	typeref:typename:INEXACT REAL
acytail	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL acxtail, acytail, bcxtail, bcytail;$/;"	v	typeref:typename:REAL
add	lib/nikfemm/src/matrix/simple_vector.cpp	/^    void CV::add(CV& result, const CV& cv, const double d) {$/;"	f	class:nikfemm::CV	typeref:typename:void
add	lib/nikfemm/src/matrix/simple_vector.cpp	/^    void CV::add(CV& result, const CV& cv1, const CV& cv2) {$/;"	f	class:nikfemm::CV	typeref:typename:void
addAdjacentMu	lib/nikfemm/src/mesh/vertex.cpp	/^    void Vertex::addAdjacentMu(double mu) {$/;"	f	class:nikfemm::Vertex	typeref:typename:void
addAdjacentVertex	lib/nikfemm/src/mesh/vertex.cpp	/^    void Vertex::addAdjacentVertex(Vertex* v) {$/;"	f	class:nikfemm::Vertex	typeref:typename:void
addDirichletBoundaryConditions	lib/nikfemm/src/mesh/mesh.cpp	/^    void Mesh::addDirichletBoundaryConditions(MatCOO &coo, CV &b) {$/;"	f	class:nikfemm::Mesh	typeref:typename:void
addKelvinBoundaryConditions	lib/nikfemm/src/mesh/mesh.cpp	/^    void Mesh::addKelvinBoundaryConditions() {$/;"	f	class:nikfemm::Mesh	typeref:typename:void
addScaled	lib/nikfemm/src/matrix/simple_vector.cpp	/^    void CV::addScaled(CV& result, const CV& cv1, const double d, const CV& cv2) {$/;"	f	class:nikfemm::CV	typeref:typename:void
add_elem	lib/nikfemm/src/matrix/coo.cpp	/^    void MatCOO::add_elem(ElemCOO elem) {$/;"	f	class:nikfemm::MatCOO	typeref:typename:void
add_elem	lib/nikfemm/src/matrix/coo.cpp	/^    void MatCOO::add_elem(uint64_t m, uint64_t n, double val) {$/;"	f	class:nikfemm::MatCOO	typeref:typename:void
addps	lib/nikfemm/lib/triangle/showme.c	/^void addps(instring, outstring, eps)$/;"	f
adjfilename	lib/nikfemm/lib/triangle/showme.c	/^char adjfilename[2][FILENAMESIZE];$/;"	v	typeref:typename:char[2][]
adjmu_r	lib/nikfemm/src/mesh/vertex.hpp	/^            double adjmu_r[18];$/;"	m	class:nikfemm::Vertex	typeref:typename:double[18]
adjmu_r_count	lib/nikfemm/src/mesh/vertex.hpp	/^            uint8_t adjmu_r_count = 0;$/;"	m	class:nikfemm::Vertex	typeref:typename:uint8_t
adjptr	lib/nikfemm/lib/triangle/showme.c	/^int *adjptr[2];$/;"	v	typeref:typename:int * [2]
adjsubdomains	lib/nikfemm/lib/triangle/showme.c	/^int adjsubdomains[2];$/;"	v	typeref:typename:int[2]
adjvert	lib/nikfemm/src/mesh/vertex.hpp	/^            Vertex* adjvert[18];$/;"	m	class:nikfemm::Vertex	typeref:typename:Vertex * [18]
adjvert_count	lib/nikfemm/src/mesh/vertex.hpp	/^            uint8_t adjvert_count = 0;$/;"	m	class:nikfemm::Vertex	typeref:typename:uint8_t
adjwin	lib/nikfemm/lib/triangle/showme.c	/^Window adjwin[2];$/;"	v	typeref:typename:Window[2]
ahead	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL ahead;$/;"	v	typeref:typename:REAL
ahi	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL ahi, alo, bhi, blo;$/;"	v	typeref:typename:REAL
alignbytes	lib/nikfemm/lib/triangle/triangle.cpp	/^  int alignbytes;$/;"	m	struct:memorypool	typeref:typename:int	file:
alignment	lib/nikfemm/lib/triangle/triangle.cpp	/^int alignment;$/;"	v	typeref:typename:int
alignptr	lib/nikfemm/lib/triangle/triangle.cpp	/^  INT_PTR alignptr = 0;$/;"	v	typeref:typename:INT_PTR
all	lib/nikfemm/lib/triangle/makefile	/^all: $(BIN)triangle $(BIN)showme$/;"	t
alo	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL ahi, alo, bhi, blo;$/;"	v	typeref:typename:REAL
angle	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL angle;$/;"	v	typeref:typename:REAL
aodist	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dodist, aodist, dadist;$/;"	v	typeref:typename:REAL
apex	lib/nikfemm/lib/triangle/triangle.cpp	/^#define apex(/;"	d	file:
apexlen	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL apexlen, orglen, destlen, minedge;$/;"	v	typeref:typename:REAL
area	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL area;$/;"	v	typeref:typename:REAL
area	lib/nikfemm/lib/triangle/triangle.cpp	/^REAL area;                                      \/* The area of the triangle. *\/$/;"	v	typeref:typename:REAL
areabound	lib/nikfemm/lib/triangle/triangle.cpp	/^#define areabound(/;"	d	file:
areaboundindex	lib/nikfemm/lib/triangle/triangle.cpp	/^  int areaboundindex;             \/* Index to find area bound of a triangle. *\/$/;"	m	struct:mesh	typeref:typename:int	file:
areafilename	lib/nikfemm/lib/triangle/triangle.cpp	/^  char areafilename[FILENAMESIZE];$/;"	m	struct:behavior	typeref:typename:char[]	file:
areafilename	lib/nikfemm/lib/triangle/triangle.cpp	/^char *areafilename;$/;"	v	typeref:typename:char *
argv	lib/nikfemm/lib/triangle/triangle.cpp	/^char **argv;$/;"	v	typeref:typename:char **
around	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL avirt, bround, around;$/;"	v	typeref:typename:REAL
aroundvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  int aroundvertex;$/;"	v	typeref:typename:int
arraysize	lib/nikfemm/lib/triangle/triangle.cpp	/^int arraysize;$/;"	v	typeref:typename:int
atanCompare	lib/nikfemm/src/mesh/vertex.hpp	/^                atanCompare(Point center) {$/;"	f	struct:nikfemm::Vertex::atanCompare
atanCompare	lib/nikfemm/src/mesh/vertex.hpp	/^            struct atanCompare {$/;"	s	class:nikfemm::Vertex
attrib	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL attrib;$/;"	v	typeref:typename:REAL
attribindex	lib/nikfemm/lib/triangle/triangle.cpp	/^  int attribindex;$/;"	v	typeref:typename:int
attribs	lib/nikfemm/lib/triangle/triangle.cpp	/^int attribs;$/;"	v	typeref:typename:int
avirt	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL avirt, bround, around;$/;"	v	typeref:typename:REAL
axis	lib/nikfemm/lib/triangle/triangle.cpp	/^int axis;$/;"	v	typeref:typename:int
b	lib/nikfemm/lib/triangle/triangle.cpp	/^struct behavior *b;$/;"	v	typeref:struct:behavior *
backtracktri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri backtracktri;$/;"	v	typeref:struct:otri
badedge	lib/nikfemm/lib/triangle/triangle.cpp	/^  int badedge;$/;"	v	typeref:typename:int
badsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^struct badsubseg {$/;"	s	file:
badsubsegs	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct memorypool badsubsegs;$/;"	m	struct:mesh	typeref:struct:memorypool	file:
badtri	lib/nikfemm/lib/triangle/triangle.cpp	/^struct badtriang *badtri;$/;"	v	typeref:struct:badtriang *
badtriang	lib/nikfemm/lib/triangle/triangle.cpp	/^struct badtriang {$/;"	s	file:
badtriangles	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct memorypool badtriangles;$/;"	m	struct:mesh	typeref:struct:memorypool	file:
base1	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex base1, base2;$/;"	v	typeref:typename:vertex
base2	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex base1, base2;$/;"	v	typeref:typename:vertex
baseedge	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri baseedge;$/;"	v	typeref:struct:otri
bclen2	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL aclen2, bclen2, ablen2;$/;"	v	typeref:typename:REAL
bclen2	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL aclen2, bclen2;$/;"	v	typeref:typename:REAL
bcx	lib/nikfemm/lib/triangle/triangle.cpp	/^  INEXACT REAL acx, acy, bcx, bcy;$/;"	v	typeref:typename:INEXACT REAL
bcxtail	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL acxtail, acytail, bcxtail, bcytail;$/;"	v	typeref:typename:REAL
bcy	lib/nikfemm/lib/triangle/triangle.cpp	/^  INEXACT REAL acx, acy, bcx, bcy;$/;"	v	typeref:typename:INEXACT REAL
bcytail	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL acxtail, acytail, bcxtail, bcytail;$/;"	v	typeref:typename:REAL
behavior	lib/nikfemm/lib/triangle/triangle.cpp	/^struct behavior {$/;"	s	file:
bestnumber	lib/nikfemm/lib/triangle/triangle.cpp	/^  int bestnumber;$/;"	v	typeref:typename:int
besttri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri besttri;$/;"	v	typeref:struct:otri
bestvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex bestvertex;$/;"	v	typeref:typename:vertex
bhi	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL ahi, alo, bhi, blo;$/;"	v	typeref:typename:REAL
black	lib/nikfemm/lib/triangle/showme.c	/^int black, white;$/;"	v	typeref:typename:int
blackfontgc	lib/nikfemm/lib/triangle/showme.c	/^GC blackfontgc;$/;"	v	typeref:typename:GC
blo	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL ahi, alo, bhi, blo;$/;"	v	typeref:typename:REAL
bond	lib/nikfemm/lib/triangle/triangle.cpp	/^#define bond(/;"	d	file:
botlcasing	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri botlcasing, botrcasing, toprcasing;$/;"	v	typeref:struct:otri
botlcasing	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri botlcasing, botrcasing;$/;"	v	typeref:struct:otri
botleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri botleft, botright, topright;$/;"	v	typeref:struct:otri
botleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri botleft, botright;$/;"	v	typeref:struct:otri
botlsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub botlsubseg, botrsubseg, toprsubseg;$/;"	v	typeref:struct:osub
botlsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub botlsubseg, botrsubseg;$/;"	v	typeref:struct:osub
botrcasing	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri botlcasing, botrcasing, toprcasing;$/;"	v	typeref:struct:otri
botrcasing	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri botlcasing, botrcasing;$/;"	v	typeref:struct:otri
botright	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri botleft, botright, topright;$/;"	v	typeref:struct:otri
botright	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri botleft, botright;$/;"	v	typeref:struct:otri
botrsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub botlsubseg, botrsubseg, toprsubseg;$/;"	v	typeref:struct:osub
botrsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub botlsubseg, botrsubseg;$/;"	v	typeref:struct:osub
bottommost	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri bottommost;$/;"	v	typeref:struct:otri
bottommost	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *bottommost;$/;"	v	typeref:struct:otri *
botvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex botvertex, rightvertex;$/;"	v	typeref:typename:vertex
botvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex leftvertex, rightvertex, botvertex, topvertex, farvertex;$/;"	v	typeref:typename:vertex
botvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex leftvertex, rightvertex, botvertex;$/;"	v	typeref:typename:vertex
boundary_vertices	lib/nikfemm/src/mesh/mesh.hpp	/^        std::vector<Vertex*> boundary_vertices;$/;"	m	struct:nikfemm::Mesh	typeref:typename:std::vector<Vertex * >
boundmarker	lib/nikfemm/lib/triangle/triangle.cpp	/^  int boundmarker;$/;"	v	typeref:typename:int
brokensubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub brokensubseg;$/;"	v	typeref:struct:osub
bround	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL avirt, bround, around;$/;"	v	typeref:typename:REAL
bvirt	lib/nikfemm/lib/triangle/triangle.cpp	/^  INEXACT REAL bvirt;$/;"	v	typeref:typename:INEXACT REAL
bw_ps	lib/nikfemm/lib/triangle/showme.c	/^int quiet, fillelem, bw_ps, explode;$/;"	v	typeref:typename:int
bytecount	lib/nikfemm/lib/triangle/triangle.cpp	/^int bytecount;$/;"	v	typeref:typename:int
c	lib/nikfemm/lib/triangle/triangle.cpp	/^  INEXACT REAL c;$/;"	v	typeref:typename:INEXACT REAL
ccwabc	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL ccwabc;$/;"	v	typeref:typename:REAL
ccwabc	lib/nikfemm/lib/triangle/triangle.cpp	/^REAL ccwabc;$/;"	v	typeref:typename:REAL
ccwerrboundA	lib/nikfemm/lib/triangle/triangle.cpp	/^static REAL ccwerrboundA, ccwerrboundB, ccwerrboundC;$/;"	v	typeref:typename:REAL	file:
ccwerrboundB	lib/nikfemm/lib/triangle/triangle.cpp	/^static REAL ccwerrboundA, ccwerrboundB, ccwerrboundC;$/;"	v	typeref:typename:REAL	file:
ccwerrboundC	lib/nikfemm/lib/triangle/triangle.cpp	/^static REAL ccwerrboundA, ccwerrboundB, ccwerrboundC;$/;"	v	typeref:typename:REAL	file:
center	lib/nikfemm/src/geometry/circle.hpp	/^            Point center;$/;"	m	struct:nikfemm::Circle	typeref:typename:Point
center	lib/nikfemm/src/mesh/mesh.hpp	/^        Point center = Point(0, 0);$/;"	m	struct:nikfemm::Mesh	typeref:typename:Point
center	lib/nikfemm/src/mesh/vertex.hpp	/^                Point center;$/;"	m	struct:nikfemm::Vertex::atanCompare	typeref:typename:Point
changemade	lib/nikfemm/lib/triangle/triangle.cpp	/^  int changemade;$/;"	v	typeref:typename:int
check4events	lib/nikfemm/lib/triangle/triangle.cpp	/^  int check4events, farrightflag;$/;"	v	typeref:typename:int
checkapex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex checkdest, checkapex;$/;"	v	typeref:typename:vertex
checkdest	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex checkdest, checkapex;$/;"	v	typeref:typename:vertex
checkedge	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub checkedge;$/;"	v	typeref:struct:osub
checkedge	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri checkedge;$/;"	v	typeref:struct:otri
checkleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri checkleft;$/;"	v	typeref:struct:otri
checkneighbor	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri checkneighbor;$/;"	v	typeref:struct:otri
checkquality	lib/nikfemm/lib/triangle/triangle.cpp	/^  int checkquality;                  \/* Has quality triangulation begun yet? *\/$/;"	m	struct:mesh	typeref:typename:int	file:
checksegments	lib/nikfemm/lib/triangle/triangle.cpp	/^  int checksegments;         \/* Are there segments in the triangulation yet? *\/$/;"	m	struct:mesh	typeref:typename:int	file:
checksubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub checksubseg;$/;"	v	typeref:struct:osub
checktri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri checktri;$/;"	v	typeref:struct:otri
checktri	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *checktri;$/;"	v	typeref:struct:otri *
checkvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex checkvertex;$/;"	v	typeref:typename:vertex
child	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct splaynode *child, *grandchild;$/;"	v	typeref:struct:splaynode *
choose_image	lib/nikfemm/lib/triangle/showme.c	/^void choose_image(inc, image)$/;"	f
circletopcount	lib/nikfemm/lib/triangle/triangle.cpp	/^  long circletopcount;       \/* Number of circle top calculations performed. *\/$/;"	m	struct:mesh	typeref:typename:long	file:
circumcenter	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex circumcenter;$/;"	v	typeref:typename:vertex
circumcentercount	lib/nikfemm/lib/triangle/triangle.cpp	/^  long circumcentercount;  \/* Number of circumcenter calculations performed. *\/$/;"	m	struct:mesh	typeref:typename:long	file:
clear	lib/nikfemm/src/unique_bimap.hpp	/^            void clear() {$/;"	f	class:nikfemm::unique_bimap	typeref:typename:void
color	lib/nikfemm/lib/triangle/showme.c	/^int color;$/;"	v	typeref:typename:int
colorname	lib/nikfemm/lib/triangle/showme.c	/^char *colorname[] = {"aquamarine", "red", "green yellow", "magenta",$/;"	v	typeref:typename:char * []
colors	lib/nikfemm/lib/triangle/showme.c	/^int colors[MAXCOLORS];$/;"	v	typeref:typename:int[]
conformdel	lib/nikfemm/lib/triangle/triangle.cpp	/^  int noholes, noexact, conformdel;$/;"	m	struct:behavior	typeref:typename:int	file:
conjugateGradientSolve	lib/nikfemm/src/matrix/csr.cpp	/^    CV MatCSR::conjugateGradientSolve(CV& b, CV& x0, double maxError, uint64_t maxIterations) {$/;"	f	class:nikfemm::MatCSR	typeref:typename:CV
connectvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex connectvertex;$/;"	v	typeref:typename:vertex
const	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
contains	lib/nikfemm/src/geometry/circle.hpp	/^            inline bool contains(Point p) {$/;"	f	struct:nikfemm::Circle	typeref:typename:bool
containsLeft	lib/nikfemm/src/unique_bimap.hpp	/^            bool containsLeft(T1 key1) {$/;"	f	class:nikfemm::unique_bimap	typeref:typename:bool
containsPoints	lib/nikfemm/src/geometry/circle.hpp	/^            inline bool containsPoints(std::vector<Point> points) {$/;"	f	struct:nikfemm::Circle	typeref:typename:bool
containsRight	lib/nikfemm/src/unique_bimap.hpp	/^            bool containsRight(T2 key2) {$/;"	f	class:nikfemm::unique_bimap	typeref:typename:bool
convex	lib/nikfemm/lib/triangle/triangle.cpp	/^  int regionattrib, convex, weighted, jettison;$/;"	m	struct:behavior	typeref:typename:int	file:
copy	lib/nikfemm/src/matrix/simple_vector.cpp	/^    void CV::copy(CV& result, const CV& cv) {$/;"	f	class:nikfemm::CV	typeref:typename:void
corner	lib/nikfemm/lib/triangle/triangle.cpp	/^  int corner[3];$/;"	v	typeref:typename:int[3]
corners	lib/nikfemm/lib/triangle/triangle.cpp	/^int corners;$/;"	v	typeref:typename:int
counterclockcount	lib/nikfemm/lib/triangle/triangle.cpp	/^  long counterclockcount;     \/* Number of counterclockwise tests performed. *\/$/;"	m	struct:mesh	typeref:typename:long	file:
countingtri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri countingtri;$/;"	v	typeref:struct:otri
current	lib/nikfemm/lib/triangle/triangle.cpp	/^  int current;$/;"	v	typeref:typename:int
current_image	lib/nikfemm/lib/triangle/showme.c	/^int start_image, current_image;$/;"	v	typeref:typename:int
current_inc	lib/nikfemm/lib/triangle/showme.c	/^int start_inc, current_inc;$/;"	v	typeref:typename:int
dadist	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dodist, aodist, dadist;$/;"	v	typeref:typename:REAL
dalen	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL oalen, dalen, odlen;$/;"	v	typeref:typename:REAL
deadevent	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct event *deadevent;$/;"	v	typeref:struct:event *
deaditemstack	lib/nikfemm/lib/triangle/triangle.cpp	/^  VOID *deaditemstack;$/;"	m	struct:memorypool	typeref:typename:VOID *	file:
deadsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^#define deadsubseg(/;"	d	file:
deadtri	lib/nikfemm/lib/triangle/triangle.cpp	/^#define deadtri(/;"	d	file:
deadtriangle	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri deadtriangle;$/;"	v	typeref:struct:otri
decode	lib/nikfemm/lib/triangle/triangle.cpp	/^#define decode(/;"	d	file:
deltri	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *deltri;$/;"	v	typeref:struct:otri *
deltriright	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri deltriright;$/;"	v	typeref:struct:otri
delvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex delvertex;$/;"	v	typeref:typename:vertex
denominator	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL denominator;$/;"	v	typeref:typename:REAL
dest	lib/nikfemm/lib/triangle/triangle.cpp	/^#define dest(/;"	d	file:
dest1	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex org1, dest1, org2, dest2;$/;"	v	typeref:typename:vertex
dest2	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex org1, dest1, org2, dest2;$/;"	v	typeref:typename:vertex
destlen	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL apexlen, orglen, destlen, minedge;$/;"	v	typeref:typename:REAL
destorient	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL orgorient, destorient;$/;"	v	typeref:typename:REAL
det	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL det, errbound;$/;"	v	typeref:typename:REAL
det	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL detleft, detright, det;$/;"	v	typeref:typename:REAL
detleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  INEXACT REAL detleft, detright;$/;"	v	typeref:typename:INEXACT REAL
detleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL detleft, detright, det;$/;"	v	typeref:typename:REAL
detlefttail	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL detlefttail, detrighttail;$/;"	v	typeref:typename:REAL
detright	lib/nikfemm/lib/triangle/triangle.cpp	/^  INEXACT REAL detleft, detright;$/;"	v	typeref:typename:INEXACT REAL
detright	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL detleft, detright, det;$/;"	v	typeref:typename:REAL
detrighttail	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL detlefttail, detrighttail;$/;"	v	typeref:typename:REAL
detsum	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL detsum, errbound;$/;"	v	typeref:typename:REAL
detsum	lib/nikfemm/lib/triangle/triangle.cpp	/^REAL detsum;$/;"	v	typeref:typename:REAL
display	lib/nikfemm/lib/triangle/showme.c	/^Display *display;$/;"	v	typeref:typename:Display *
dissolve	lib/nikfemm/lib/triangle/triangle.cpp	/^#define dissolve(/;"	d	file:
dissolveedge	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri dissolveedge;$/;"	v	typeref:struct:otri
dissolveedge	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri nextedge, finaledge, dissolveedge;$/;"	v	typeref:struct:otri
dist	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL searchdist, dist;$/;"	v	typeref:typename:REAL
dist1	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dist1, dist2;$/;"	v	typeref:typename:REAL
dist2	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dist1, dist2;$/;"	v	typeref:typename:REAL
distance	lib/nikfemm/src/geometry/point.hpp	/^            static double distance(Point p1, Point p2) {$/;"	f	class:nikfemm::Point	typeref:typename:double
distanceFromOrigin	lib/nikfemm/src/geometry/point.hpp	/^            double distanceFromOrigin() {$/;"	f	class:nikfemm::Point	typeref:typename:double
distclean	lib/nikfemm/lib/triangle/makefile	/^distclean:$/;"	t
div	lib/nikfemm/src/matrix/simple_vector.cpp	/^    void CV::div(CV& result, const CV& cv, const double d) {$/;"	f	class:nikfemm::CV	typeref:typename:void
div	lib/nikfemm/src/matrix/simple_vector.cpp	/^    void CV::div(CV& result, const CV& cv1, const CV& cv2) {$/;"	f	class:nikfemm::CV	typeref:typename:void
divider	lib/nikfemm/lib/triangle/triangle.cpp	/^  int divider;$/;"	v	typeref:typename:int
dnext	lib/nikfemm/lib/triangle/triangle.cpp	/^#define dnext(/;"	d	file:
dnextself	lib/nikfemm/lib/triangle/triangle.cpp	/^#define dnextself(/;"	d	file:
docheck	lib/nikfemm/lib/triangle/triangle.cpp	/^  int docheck;$/;"	m	struct:behavior	typeref:typename:int	file:
dodist	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dodist, aodist, dadist;$/;"	v	typeref:typename:REAL
doflip	lib/nikfemm/lib/triangle/triangle.cpp	/^  int doflip;$/;"	v	typeref:typename:int
doflip	lib/nikfemm/lib/triangle/triangle.cpp	/^int doflip;$/;"	v	typeref:typename:int
dot	lib/nikfemm/src/matrix/simple_vector.cpp	/^    double CV::dot(const CV& cv1, const CV& cv2) {$/;"	f	class:nikfemm::CV	typeref:typename:double
dotproduct	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dotproduct;$/;"	v	typeref:typename:REAL
downwin	lib/nikfemm/lib/triangle/showme.c	/^Window downwin;$/;"	v	typeref:typename:Window
dprev	lib/nikfemm/lib/triangle/triangle.cpp	/^#define dprev(/;"	d	file:
dprevself	lib/nikfemm/lib/triangle/triangle.cpp	/^#define dprevself(/;"	d	file:
draw	lib/nikfemm/lib/triangle/showme.c	/^void draw(inc, image, xmin, ymin, xmax, ymax)$/;"	f
drawCircle	lib/nikfemm/src/drawing/drawing.cpp	/^    void Drawing::drawCircle(Circle c, uint32_t n_segments) {$/;"	f	class:nikfemm::Drawing	typeref:typename:void
drawCircle	lib/nikfemm/src/drawing/drawing.cpp	/^    void Drawing::drawCircle(Point p, double radius, uint32_t n_segments) {$/;"	f	class:nikfemm::Drawing	typeref:typename:void
drawPolyLine	lib/nikfemm/src/drawing/drawing.cpp	/^    void Drawing::drawPolyLine(Point* points, uint32_t n_points) {$/;"	f	class:nikfemm::Drawing	typeref:typename:void
drawPolygon	lib/nikfemm/src/drawing/drawing.cpp	/^    void Drawing::drawPolygon(Point* points, uint32_t n_points) {$/;"	f	class:nikfemm::Drawing	typeref:typename:void
drawRectangle	lib/nikfemm/src/drawing/drawing.cpp	/^    void Drawing::drawRectangle(Point p1, Point p2) {$/;"	f	class:nikfemm::Drawing	typeref:typename:void
drawRectangle	lib/nikfemm/src/drawing/drawing.cpp	/^    void Drawing::drawRectangle(Point p1, double width, double height) {$/;"	f	class:nikfemm::Drawing	typeref:typename:void
drawRegion	lib/nikfemm/src/drawing/drawing.cpp	/^    void Drawing::drawRegion(Point p, PredefinedRegion region) {$/;"	f	class:nikfemm::Drawing	typeref:typename:void
drawRegion	lib/nikfemm/src/drawing/drawing.cpp	/^    void Drawing::drawRegion(Point p, uint32_t region_attribute) {$/;"	f	class:nikfemm::Drawing	typeref:typename:void
drawSegment	lib/nikfemm/src/drawing/drawing.cpp	/^    void Drawing::drawSegment(Point p1, Point p2) {$/;"	f	class:nikfemm::Drawing	typeref:typename:void
drawSegment	lib/nikfemm/src/drawing/drawing.cpp	/^    void Drawing::drawSegment(Segment s) {$/;"	f	class:nikfemm::Drawing	typeref:typename:void
drawSegment	lib/nikfemm/src/drawing/drawing.cpp	/^    void Drawing::drawSegment(const Vertex& v1, const Vertex& v2) {$/;"	f	class:nikfemm::Drawing	typeref:typename:void
drawSegment	lib/nikfemm/src/drawing/drawing.cpp	/^    void Drawing::drawSegment(const Vertex* v1, const Vertex* v2) {$/;"	f	class:nikfemm::Drawing	typeref:typename:void
draw_adj	lib/nikfemm/lib/triangle/showme.c	/^void draw_adj(dim, subdomains, ptr, center, xscale, yscale,$/;"	f
draw_buttons	lib/nikfemm/lib/triangle/showme.c	/^void draw_buttons()$/;"	f	typeref:typename:void
draw_edge	lib/nikfemm/lib/triangle/showme.c	/^void draw_edge(nodes, dim, edges, nodeptr, edgeptr, normptr,$/;"	f
draw_ele	lib/nikfemm/lib/triangle/showme.c	/^void draw_ele(inc, elems, corners, ptr, partition, shift,$/;"	f
draw_node	lib/nikfemm/lib/triangle/showme.c	/^void draw_node(nodes, dim, ptr, xscale, yscale, xoffset, yoffset)$/;"	f
draw_poly	lib/nikfemm/lib/triangle/showme.c	/^void draw_poly(nodes, dim, edges, holes, nodeptr, edgeptr, holeptr,$/;"	f
dummysub	lib/nikfemm/lib/triangle/triangle.cpp	/^  subseg *dummysub;$/;"	m	struct:mesh	typeref:typename:subseg *	file:
dummysubbase	lib/nikfemm/lib/triangle/triangle.cpp	/^  subseg *dummysubbase;      \/* Keep base address so we can free() it later. *\/$/;"	m	struct:mesh	typeref:typename:subseg *	file:
dummytri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri dummytri;$/;"	v	typeref:struct:otri
dummytri	lib/nikfemm/lib/triangle/triangle.cpp	/^  triangle *dummytri;$/;"	m	struct:mesh	typeref:typename:triangle *	file:
dummytribase	lib/nikfemm/lib/triangle/triangle.cpp	/^  triangle *dummytribase;    \/* Keep base address so we can free() it later. *\/$/;"	m	struct:mesh	typeref:typename:triangle *	file:
dwyer	lib/nikfemm/lib/triangle/triangle.cpp	/^  int incremental, sweepline, dwyer;$/;"	m	struct:behavior	typeref:typename:int	file:
dx	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dx, dy, dxoff, dyoff;$/;"	v	typeref:typename:REAL
dxa	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxa, dya, dxb, dyb;$/;"	v	typeref:typename:REAL
dxao	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxod, dyod, dxda, dyda, dxao, dyao;$/;"	v	typeref:typename:REAL
dxao2	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxod2, dyod2, dxda2, dyda2, dxao2, dyao2;$/;"	v	typeref:typename:REAL
dxb	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxa, dya, dxb, dyb;$/;"	v	typeref:typename:REAL
dxda	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxoa, dxda, dxod;$/;"	v	typeref:typename:REAL
dxda	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxod, dyod, dxda, dyda, dxao, dyao;$/;"	v	typeref:typename:REAL
dxda2	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxod2, dyod2, dxda2, dyda2, dxao2, dyao2;$/;"	v	typeref:typename:REAL
dxoa	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxoa, dxda, dxod;$/;"	v	typeref:typename:REAL
dxod	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxoa, dxda, dxod;$/;"	v	typeref:typename:REAL
dxod	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxod, dyod, dxda, dyda, dxao, dyao;$/;"	v	typeref:typename:REAL
dxod2	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxod2, dyod2, dxda2, dyda2, dxao2, dyao2;$/;"	v	typeref:typename:REAL
dxoff	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dx, dy, dxoff, dyoff;$/;"	v	typeref:typename:REAL
dy	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dx, dy, dxoff, dyoff;$/;"	v	typeref:typename:REAL
dya	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxa, dya, dxb, dyb;$/;"	v	typeref:typename:REAL
dyao	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxod, dyod, dxda, dyda, dxao, dyao;$/;"	v	typeref:typename:REAL
dyao2	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxod2, dyod2, dxda2, dyda2, dxao2, dyao2;$/;"	v	typeref:typename:REAL
dyb	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxa, dya, dxb, dyb;$/;"	v	typeref:typename:REAL
dyda	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxod, dyod, dxda, dyda, dxao, dyao;$/;"	v	typeref:typename:REAL
dyda	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dyoa, dyda, dyod;$/;"	v	typeref:typename:REAL
dyda2	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxod2, dyod2, dxda2, dyda2, dxao2, dyao2;$/;"	v	typeref:typename:REAL
dyingitem	lib/nikfemm/lib/triangle/triangle.cpp	/^VOID *dyingitem;$/;"	v	typeref:typename:VOID *
dyingseg	lib/nikfemm/lib/triangle/triangle.cpp	/^struct badsubseg *dyingseg;$/;"	v	typeref:struct:badsubseg *
dyingsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^subseg *dyingsubseg;$/;"	v	typeref:typename:subseg *
dyingtriangle	lib/nikfemm/lib/triangle/triangle.cpp	/^triangle *dyingtriangle;$/;"	v	typeref:typename:triangle *
dyingvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex dyingvertex;$/;"	v	typeref:typename:vertex
dyoa	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dyoa, dyda, dyod;$/;"	v	typeref:typename:REAL
dyod	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxod, dyod, dxda, dyda, dxao, dyao;$/;"	v	typeref:typename:REAL
dyod	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dyoa, dyda, dyod;$/;"	v	typeref:typename:REAL
dyod2	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dxod2, dyod2, dxda2, dyda2, dxao2, dyao2;$/;"	v	typeref:typename:REAL
dyoff	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL dx, dy, dxoff, dyoff;$/;"	v	typeref:typename:REAL
eapex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex eorg, edest, eapex;$/;"	v	typeref:typename:vertex
edest	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex eorg, edest, eapex;$/;"	v	typeref:typename:vertex
edgecount	lib/nikfemm/lib/triangle/triangle.cpp	/^  int edgecount;$/;"	v	typeref:typename:int
edgecount	lib/nikfemm/lib/triangle/triangle.cpp	/^int edgecount;$/;"	v	typeref:typename:int
edgefilename	lib/nikfemm/lib/triangle/showme.c	/^char edgefilename[2][FILENAMESIZE];$/;"	v	typeref:typename:char[2][]
edgefilename	lib/nikfemm/lib/triangle/triangle.cpp	/^  char edgefilename[FILENAMESIZE];$/;"	m	struct:behavior	typeref:typename:char[]	file:
edgelist	lib/nikfemm/lib/triangle/triangle.h	/^  int *edgelist;                                                 \/* Out only *\/$/;"	m	struct:triangulateio	typeref:typename:int *
edgemarkerlist	lib/nikfemm/lib/triangle/triangle.h	/^  int *edgemarkerlist;            \/* Not used with Voronoi diagram; out only *\/$/;"	m	struct:triangulateio	typeref:typename:int *
edgeptr	lib/nikfemm/lib/triangle/showme.c	/^int *edgeptr[2];$/;"	v	typeref:typename:int * [2]
edges	lib/nikfemm/lib/triangle/showme.c	/^int edges[2];$/;"	v	typeref:typename:int[2]
edges	lib/nikfemm/lib/triangle/triangle.cpp	/^  long edges;                                     \/* Number of output edges. *\/$/;"	m	struct:mesh	typeref:typename:long	file:
edgesout	lib/nikfemm/lib/triangle/triangle.cpp	/^  int edgesout, voronoi, neighbors, geomview;$/;"	m	struct:behavior	typeref:typename:int	file:
edgewin	lib/nikfemm/lib/triangle/showme.c	/^Window edgewin[2];$/;"	v	typeref:typename:Window[2]
eextras	lib/nikfemm/lib/triangle/triangle.cpp	/^  int eextras;                         \/* Number of attributes per triangle. *\/$/;"	m	struct:mesh	typeref:typename:int	file:
ele_corners	lib/nikfemm/lib/triangle/showme.c	/^int elems[2], ele_corners[2];$/;"	v	typeref:typename:int[2]
elefilename	lib/nikfemm/lib/triangle/showme.c	/^char elefilename[2][FILENAMESIZE];$/;"	v	typeref:typename:char[2][]
elefilename	lib/nikfemm/lib/triangle/triangle.cpp	/^char *elefilename;$/;"	v	typeref:typename:char *
elemattribindex	lib/nikfemm/lib/triangle/triangle.cpp	/^  int elemattribindex;            \/* Index to find attributes of a triangle. *\/$/;"	m	struct:mesh	typeref:typename:int	file:
elemattribute	lib/nikfemm/lib/triangle/triangle.cpp	/^#define elemattribute(/;"	d	file:
elementnumber	lib/nikfemm/lib/triangle/triangle.cpp	/^  long elementnumber, segmentnumber;$/;"	v	typeref:typename:long
elements	lib/nikfemm/lib/triangle/triangle.cpp	/^int elements;$/;"	v	typeref:typename:int
elems	lib/nikfemm/lib/triangle/showme.c	/^int elems[2], ele_corners[2];$/;"	v	typeref:typename:int[2]
elems	lib/nikfemm/src/matrix/coo.hpp	/^        std::vector<ElemCOO> elems;$/;"	m	struct:nikfemm::MatCOO	typeref:typename:std::vector<ElemCOO>
eleptr	lib/nikfemm/lib/triangle/showme.c	/^int *eleptr[2];$/;"	v	typeref:typename:int * [2]
elewin	lib/nikfemm/lib/triangle/showme.c	/^Window elewin[2];$/;"	v	typeref:typename:Window[2]
encode	lib/nikfemm/lib/triangle/triangle.cpp	/^#define encode(/;"	d	file:
encroached	lib/nikfemm/lib/triangle/triangle.cpp	/^  int encroached;$/;"	v	typeref:typename:int
encroached	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct badsubseg *encroached;$/;"	v	typeref:struct:badsubseg *
encroachedseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct badsubseg *encroachedseg;$/;"	v	typeref:struct:badsubseg *
encsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  subseg encsubseg;                             \/* An encroached subsegment. *\/$/;"	m	struct:badsubseg	typeref:typename:subseg	file:
end	lib/nikfemm/lib/triangle/triangle.cpp	/^  int end[2];$/;"	v	typeref:typename:int[2]
enq	lib/nikfemm/lib/triangle/triangle.cpp	/^  int enq;$/;"	v	typeref:typename:int
enqapex	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex enqapex;$/;"	v	typeref:typename:vertex
enqdest	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex enqdest;$/;"	v	typeref:typename:vertex
enqorg	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex enqorg;$/;"	v	typeref:typename:vertex
enqtri	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *enqtri;$/;"	v	typeref:struct:otri *
enumerateVertices	lib/nikfemm/src/mesh/mesh.cpp	/^    void Mesh::enumerateVertices() {$/;"	f	class:nikfemm::Mesh	typeref:typename:void
eorg	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex eorg, edest, eapex;$/;"	v	typeref:typename:vertex
epsilon	lib/nikfemm/lib/triangle/triangle.cpp	/^static REAL epsilon;                             \/* Floating-point machine epsilon. *\/$/;"	v	typeref:typename:REAL	file:
epswin	lib/nikfemm/lib/triangle/showme.c	/^Window epswin;$/;"	v	typeref:typename:Window
equal_to	lib/nikfemm/src/drawing/drawing_segment.hpp	/^    struct equal_to<nikfemm::DrawingSegment> {$/;"	s	namespace:std
equal_to	lib/nikfemm/src/geometry/point.hpp	/^    struct equal_to<nikfemm::Point> {$/;"	s	namespace:std
equal_to	lib/nikfemm/src/mesh/vertex.hpp	/^    struct equal_to<nikfemm::Vertex*> {$/;"	s	namespace:std
err1	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL err1, err2, err3;$/;"	v	typeref:typename:REAL
err2	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL err1, err2, err3;$/;"	v	typeref:typename:REAL
err3	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL err1, err2, err3;$/;"	v	typeref:typename:REAL
errbound	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL det, errbound;$/;"	v	typeref:typename:REAL
errbound	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL detsum, errbound;$/;"	v	typeref:typename:REAL
estimate	lib/nikfemm/lib/triangle/triangle.cpp	/^REAL estimate(int elen, REAL *e)$/;"	f	typeref:typename:REAL	file:
eta	lib/nikfemm/lib/triangle/triangle.cpp	/^REAL *eta;$/;"	v	typeref:typename:REAL *
event	lib/nikfemm/lib/triangle/showme.c	/^XEvent event;$/;"	v	typeref:typename:XEvent
event	lib/nikfemm/lib/triangle/triangle.cpp	/^struct event {$/;"	s	file:
eventheap	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct event **eventheap;$/;"	v	typeref:struct:event **
eventheap	lib/nikfemm/lib/triangle/triangle.cpp	/^struct event ***eventheap;$/;"	v	typeref:struct:event ***
eventheap	lib/nikfemm/lib/triangle/triangle.cpp	/^struct event **eventheap;$/;"	v	typeref:struct:event **
eventnum	lib/nikfemm/lib/triangle/triangle.cpp	/^  int eventnum;$/;"	v	typeref:typename:int
eventnum	lib/nikfemm/lib/triangle/triangle.cpp	/^int eventnum;$/;"	v	typeref:typename:int
eventptr	lib/nikfemm/lib/triangle/triangle.cpp	/^  VOID *eventptr;      \/* Can be a vertex or the location of a circle event. *\/$/;"	m	struct:event	typeref:typename:VOID *	file:
events	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct event *events;$/;"	v	typeref:struct:event *
events	lib/nikfemm/lib/triangle/triangle.cpp	/^struct event **events;$/;"	v	typeref:struct:event **
eventvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex eventvertex;$/;"	v	typeref:typename:vertex
eventx	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL eventx, eventy;$/;"	v	typeref:typename:REAL
eventy	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL eventx, eventy;$/;"	v	typeref:typename:REAL
exactinit	lib/nikfemm/lib/triangle/triangle.cpp	/^void exactinit()$/;"	f	typeref:typename:void	file:
expincrement	lib/nikfemm/lib/triangle/triangle.cpp	/^  int exponent, expincrement;$/;"	v	typeref:typename:int
explode	lib/nikfemm/lib/triangle/showme.c	/^int quiet, fillelem, bw_ps, explode;$/;"	v	typeref:typename:int
explosion	lib/nikfemm/lib/triangle/showme.c	/^REAL explosion;$/;"	v	typeref:typename:REAL
expminuswin	lib/nikfemm/lib/triangle/showme.c	/^Window expminuswin;$/;"	v	typeref:typename:Window
exponent	lib/nikfemm/lib/triangle/triangle.cpp	/^  int exponent, expincrement;$/;"	v	typeref:typename:int
exppluswin	lib/nikfemm/lib/triangle/showme.c	/^Window exppluswin;$/;"	v	typeref:typename:Window
expwin	lib/nikfemm/lib/triangle/showme.c	/^Window expwin;$/;"	v	typeref:typename:Window
fapex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex forg, fdest, fapex;$/;"	v	typeref:typename:vertex
farleft	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *farleft;$/;"	v	typeref:struct:otri *
farleftapex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex farleftapex, farrightapex;$/;"	v	typeref:typename:vertex
farleftpt	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex farleftpt, farrightpt;$/;"	v	typeref:typename:vertex
farlefttri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri lefttri, righttri, farlefttri, farrighttri;$/;"	v	typeref:struct:otri
farright	lib/nikfemm/lib/triangle/triangle.cpp	/^int *farright;$/;"	v	typeref:typename:int *
farright	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *farright;$/;"	v	typeref:struct:otri *
farrightapex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex farleftapex, farrightapex;$/;"	v	typeref:typename:vertex
farrightflag	lib/nikfemm/lib/triangle/triangle.cpp	/^  int check4events, farrightflag;$/;"	v	typeref:typename:int
farrightflag	lib/nikfemm/lib/triangle/triangle.cpp	/^  int farrightflag;$/;"	v	typeref:typename:int
farrightpt	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex farleftpt, farrightpt;$/;"	v	typeref:typename:vertex
farrighttri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri lefttri, righttri, farlefttri, farrighttri;$/;"	v	typeref:struct:otri
farvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex farvertex;$/;"	v	typeref:typename:vertex
farvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex leftvertex, rightvertex, botvertex, topvertex, farvertex;$/;"	v	typeref:typename:vertex
fast_expansion_sum_zeroelim	lib/nikfemm/lib/triangle/triangle.cpp	/^int fast_expansion_sum_zeroelim(int elen, REAL *e, int flen, REAL *f, REAL *h)$/;"	f	typeref:typename:int	file:
fdest	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex forg, fdest, fapex;$/;"	v	typeref:typename:vertex
filename	lib/nikfemm/lib/triangle/showme.c	/^char filename[FILENAMESIZE];$/;"	v	typeref:typename:char[]
fill_button	lib/nikfemm/lib/triangle/showme.c	/^void fill_button(button)$/;"	f
fillelem	lib/nikfemm/lib/triangle/showme.c	/^int quiet, fillelem, bw_ps, explode;$/;"	v	typeref:typename:int
fillwin	lib/nikfemm/lib/triangle/showme.c	/^Window fillwin;$/;"	v	typeref:typename:Window
finaledge	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri nextedge, finaledge, dissolveedge;$/;"	v	typeref:struct:otri
finddirectionresult	lib/nikfemm/lib/triangle/triangle.cpp	/^enum finddirectionresult {WITHIN, LEFTCOLLINEAR, RIGHTCOLLINEAR};$/;"	g	file:
findfield	lib/nikfemm/lib/triangle/showme.c	/^char *findfield(string)$/;"	f
findpartshift	lib/nikfemm/lib/triangle/showme.c	/^void findpartshift(parts, explosion, partcenter, partshift)$/;"	f
first	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex first;$/;"	v	typeref:typename:vertex
firstblock	lib/nikfemm/lib/triangle/triangle.cpp	/^  VOID **firstblock, **nowblock;$/;"	m	struct:memorypool	typeref:typename:VOID **	file:
firstedge	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri firstedge, lastedge;$/;"	v	typeref:struct:otri
firstedge	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *firstedge;$/;"	v	typeref:struct:otri *
firstitemcount	lib/nikfemm/lib/triangle/triangle.cpp	/^int firstitemcount;$/;"	v	typeref:typename:int
firstnonemptyq	lib/nikfemm/lib/triangle/triangle.cpp	/^  int firstnonemptyq;$/;"	m	struct:mesh	typeref:typename:int	file:
firstnumber	lib/nikfemm/lib/triangle/showme.c	/^int firstnumber[2];$/;"	v	typeref:typename:int[2]
firstnumber	lib/nikfemm/lib/triangle/triangle.cpp	/^  int firstnumber;$/;"	m	struct:behavior	typeref:typename:int	file:
firsttri	lib/nikfemm/lib/triangle/triangle.cpp	/^  char *firsttri;$/;"	v	typeref:typename:char *
firstvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex firstvertex, secondvertex;$/;"	v	typeref:typename:vertex
fixedarea	lib/nikfemm/lib/triangle/triangle.cpp	/^  int poly, refine, quality, vararea, fixedarea, usertest;$/;"	m	struct:behavior	typeref:typename:int	file:
flipedge	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *flipedge;                    \/* Handle for the triangle abc. *\/$/;"	v	typeref:struct:otri *
flippedtri	lib/nikfemm/lib/triangle/triangle.cpp	/^  triangle flippedtri;                       \/* A recently flipped triangle. *\/$/;"	m	struct:flipstacker	typeref:typename:triangle	file:
flipstacker	lib/nikfemm/lib/triangle/triangle.cpp	/^struct flipstacker {$/;"	s	file:
flipstackers	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct memorypool flipstackers;$/;"	m	struct:mesh	typeref:struct:memorypool	file:
fliptri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri fliptri;$/;"	v	typeref:struct:otri
float32_t	lib/nikfemm/include/constants.hpp	/^#define float32_t /;"	d
float64_t	lib/nikfemm/include/constants.hpp	/^#define float64_t /;"	d
font	lib/nikfemm/lib/triangle/showme.c	/^XFontStruct *font;$/;"	v	typeref:typename:XFontStruct *
fontgc	lib/nikfemm/lib/triangle/showme.c	/^GC fontgc;$/;"	v	typeref:typename:GC
forg	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex forg, fdest, fapex;$/;"	v	typeref:typename:vertex
foundvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  char *foundvertex;$/;"	v	typeref:typename:char *
free_inc	lib/nikfemm/lib/triangle/showme.c	/^void free_inc(inc)$/;"	f
freeevents	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct event *freeevents;$/;"	v	typeref:struct:event *
freeevents	lib/nikfemm/lib/triangle/triangle.cpp	/^struct event **freeevents;$/;"	v	typeref:struct:event **
fronttri	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *fronttri;$/;"	v	typeref:struct:otri *
generateMesh	lib/nikfemm/src/simulation.cpp	/^    void Simulation::generateMesh(Drawing drawing) {$/;"	f	class:nikfemm::Simulation	typeref:typename:void
geomview	lib/nikfemm/lib/triangle/triangle.cpp	/^  int edgesout, voronoi, neighbors, geomview;$/;"	m	struct:behavior	typeref:typename:int	file:
getCircleFromPoints	lib/nikfemm/src/geometry/circle.hpp	/^            static inline Circle getCircleFromPoints(Point p1, Point p2) {$/;"	f	struct:nikfemm::Circle	typeref:typename:Circle
getCircleFromPoints	lib/nikfemm/src/geometry/circle.hpp	/^            static inline Circle getCircleFromPoints(Point p1, Point p2, Point p3) {$/;"	f	struct:nikfemm::Circle	typeref:typename:Circle
getCoefficientVector	lib/nikfemm/src/mesh/mesh.cpp	/^    void Mesh::getCoefficientVector(CV &b) {$/;"	f	class:nikfemm::Mesh	typeref:typename:void
getFemMatrix	lib/nikfemm/src/mesh/mesh.cpp	/^    void Mesh::getFemMatrix(MatCOO &coo) {$/;"	f	class:nikfemm::Mesh	typeref:typename:void
getLeft	lib/nikfemm/src/unique_bimap.hpp	/^            T2 getLeft(T1 key1) {$/;"	f	class:nikfemm::unique_bimap	typeref:typename:T2
getMinimumEnclosingCircle	lib/nikfemm/src/geometry/circle.cpp	/^    Circle Circle::getMinimumEnclosingCircle(std::unordered_set<Point> points) {$/;"	f	class:nikfemm::Circle	typeref:typename:Circle
getMinimumEnclosingCircle	lib/nikfemm/src/geometry/circle.cpp	/^    Circle Circle::getMinimumEnclosingCircle(std::vector<Point> points) {$/;"	f	class:nikfemm::Circle	typeref:typename:Circle
getRight	lib/nikfemm/src/unique_bimap.hpp	/^            T1 getRight(T2 key2) {$/;"	f	class:nikfemm::unique_bimap	typeref:typename:T1
getWelzlPoints	lib/nikfemm/src/geometry/point.cpp	/^    std::vector<Point> Point::getWelzlPoints(std::vector<Point> points) {$/;"	f	class:nikfemm::Point	typeref:typename:std::vector<Point>
getblock	lib/nikfemm/lib/triangle/triangle.cpp	/^  VOID **getblock;$/;"	v	typeref:typename:VOID **
gluetri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri gluetri;$/;"	v	typeref:struct:otri
goodangle	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL minangle, goodangle, offconstant;$/;"	m	struct:behavior	typeref:typename:REAL	file:
grandchild	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct splaynode *child, *grandchild;$/;"	v	typeref:struct:splaynode *
hash	lib/nikfemm/src/drawing/drawing_region.hpp	/^    struct hash<nikfemm::DrawingRegion> {$/;"	s	namespace:std
hash	lib/nikfemm/src/drawing/drawing_segment.hpp	/^    struct hash<nikfemm::DrawingSegment> {$/;"	s	namespace:std
hash	lib/nikfemm/src/geometry/point.hpp	/^    struct hash<nikfemm::Point> {$/;"	s	namespace:std
hash	lib/nikfemm/src/geometry/segment.hpp	/^    struct hash<nikfemm::Segment> {$/;"	s	namespace:std
hash	lib/nikfemm/src/mesh/vertex.hpp	/^    struct hash<nikfemm::Vertex*> {$/;"	s	namespace:std
hash	lib/nikfemm/src/mesh/vertex.hpp	/^    struct hash<nikfemm::Vertex> {$/;"	s	namespace:std
heap	lib/nikfemm/lib/triangle/triangle.cpp	/^struct event **heap;$/;"	v	typeref:struct:event **
heapposition	lib/nikfemm/lib/triangle/triangle.cpp	/^  int heapposition;              \/* Marks this event's position in the heap. *\/$/;"	m	struct:event	typeref:typename:int	file:
heapsize	lib/nikfemm/lib/triangle/triangle.cpp	/^  int heapsize;$/;"	v	typeref:typename:int
heapsize	lib/nikfemm/lib/triangle/triangle.cpp	/^int *heapsize;$/;"	v	typeref:typename:int *
heapsize	lib/nikfemm/lib/triangle/triangle.cpp	/^int heapsize;$/;"	v	typeref:typename:int
height	lib/nikfemm/lib/triangle/showme.c	/^int width, height;$/;"	v	typeref:typename:int
highorderindex	lib/nikfemm/lib/triangle/triangle.cpp	/^  int highorderindex;  \/* Index to find extra nodes for high-order elements. *\/$/;"	m	struct:mesh	typeref:typename:int	file:
holelist	lib/nikfemm/lib/triangle/triangle.h	/^  TRI_REAL *holelist;                        \/* In \/ pointer to array copied out *\/$/;"	m	struct:triangulateio	typeref:typename:TRI_REAL *
holes	lib/nikfemm/lib/triangle/triangle.cpp	/^  int holes;                                       \/* Number of input holes. *\/$/;"	m	struct:mesh	typeref:typename:int	file:
horiz	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri horiz;$/;"	v	typeref:struct:otri
horrors	lib/nikfemm/lib/triangle/triangle.cpp	/^  int horrors;$/;"	v	typeref:typename:int
hulledges	lib/nikfemm/lib/triangle/triangle.cpp	/^  long hulledges;$/;"	v	typeref:typename:long
hullleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri hullleft, hullright;$/;"	v	typeref:struct:otri
hullright	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri hullleft, hullright;$/;"	v	typeref:struct:otri
hullsize	lib/nikfemm/lib/triangle/triangle.cpp	/^  long hullsize;                          \/* Number of edges in convex hull. *\/$/;"	m	struct:mesh	typeref:typename:long	file:
hullsize	lib/nikfemm/lib/triangle/triangle.cpp	/^  long hullsize;$/;"	v	typeref:typename:long
hullsize	lib/nikfemm/lib/triangle/triangle.h	/^  int hullsize;                                                  \/* Out only *\/$/;"	m	struct:triangulateio	typeref:typename:int
hyperbolacount	lib/nikfemm/lib/triangle/triangle.cpp	/^  long hyperbolacount;      \/* Number of right-of-hyperbola tests performed. *\/$/;"	m	struct:mesh	typeref:typename:long	file:
i	lib/nikfemm/lib/triangle/triangle.cpp	/^  int i, j, k;$/;"	v	typeref:typename:int
i	lib/nikfemm/lib/triangle/triangle.cpp	/^  int i, j;$/;"	v	typeref:typename:int
i	lib/nikfemm/lib/triangle/triangle.cpp	/^  int i;$/;"	v	typeref:typename:int
iccerrboundA	lib/nikfemm/lib/triangle/triangle.cpp	/^static REAL iccerrboundA, iccerrboundB, iccerrboundC;$/;"	v	typeref:typename:REAL	file:
iccerrboundB	lib/nikfemm/lib/triangle/triangle.cpp	/^static REAL iccerrboundA, iccerrboundB, iccerrboundC;$/;"	v	typeref:typename:REAL	file:
iccerrboundC	lib/nikfemm/lib/triangle/triangle.cpp	/^static REAL iccerrboundA, iccerrboundB, iccerrboundC;$/;"	v	typeref:typename:REAL	file:
id	lib/nikfemm/src/mesh/vertex.hpp	/^            uint64_t id;$/;"	m	class:nikfemm::Vertex	typeref:typename:uint64_t
id1	lib/nikfemm/src/mesh/mesh.cpp	/^            uint64_t id1;$/;"	m	struct:nikfemm::Mesh::mesh::TempSegment	typeref:typename:uint64_t	file:
id2	lib/nikfemm/src/mesh/mesh.cpp	/^            uint64_t id2;$/;"	m	struct:nikfemm::Mesh::mesh::TempSegment	typeref:typename:uint64_t	file:
incircle	lib/nikfemm/lib/triangle/triangle.cpp	/^REAL incircle(struct mesh *m, struct behavior *b,$/;"	f	typeref:typename:REAL	file:
incircleadapt	lib/nikfemm/lib/triangle/triangle.cpp	/^REAL incircleadapt(vertex pa, vertex pb, vertex pc, vertex pd, REAL permanent)$/;"	f	typeref:typename:REAL	file:
incirclecount	lib/nikfemm/lib/triangle/triangle.cpp	/^  long incirclecount;                 \/* Number of incircle tests performed. *\/$/;"	m	struct:mesh	typeref:typename:long	file:
incorners	lib/nikfemm/lib/triangle/triangle.cpp	/^  int incorners;$/;"	v	typeref:typename:int
incremental	lib/nikfemm/lib/triangle/triangle.cpp	/^  int incremental, sweepline, dwyer;$/;"	m	struct:behavior	typeref:typename:int	file:
inelefilename	lib/nikfemm/lib/triangle/triangle.cpp	/^  char inelefilename[FILENAMESIZE];$/;"	m	struct:behavior	typeref:typename:char[]	file:
inelements	lib/nikfemm/lib/triangle/triangle.cpp	/^  int inelements;                              \/* Number of input triangles. *\/$/;"	m	struct:mesh	typeref:typename:int	file:
infect	lib/nikfemm/lib/triangle/triangle.cpp	/^#define infect(/;"	d	file:
infected	lib/nikfemm/lib/triangle/triangle.cpp	/^#define infected(/;"	d	file:
info	lib/nikfemm/lib/triangle/showme.c	/^void info()$/;"	f	typeref:typename:void
info	lib/nikfemm/lib/triangle/triangle.cpp	/^void info()$/;"	f	typeref:typename:void
info_arch	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_cray	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_language_extensions_default	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_extensions_default	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_standard_default	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_standard_default =$/;"	v	typeref:typename:const char *
info_language_standard_default	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_standard_default = "INFO" ":" "standard_default["$/;"	v	typeref:typename:const char *
info_platform	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate_version	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version_internal	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
info_version_internal	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
inftri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri inftri;          \/* Handle for the triangular bounding box. *\/$/;"	v	typeref:struct:otri
infvertex1	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex infvertex1, infvertex2, infvertex3;$/;"	m	struct:mesh	typeref:typename:vertex	file:
infvertex2	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex infvertex1, infvertex2, infvertex3;$/;"	m	struct:mesh	typeref:typename:vertex	file:
infvertex3	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex infvertex1, infvertex2, infvertex3;$/;"	m	struct:mesh	typeref:typename:vertex	file:
innerleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri innerleft, innerright;$/;"	v	typeref:struct:otri
innerleft	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *innerleft;$/;"	v	typeref:struct:otri *
innerleftapex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex innerleftapex, innerrightapex;$/;"	v	typeref:typename:vertex
innerleftdest	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex innerleftdest;$/;"	v	typeref:typename:vertex
innerright	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri innerleft, innerright;$/;"	v	typeref:struct:otri
innerright	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *innerright;$/;"	v	typeref:struct:otri *
innerrightapex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex innerleftapex, innerrightapex;$/;"	v	typeref:typename:vertex
innerrightorg	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex innerrightorg;$/;"	v	typeref:typename:vertex
innodefilename	lib/nikfemm/lib/triangle/triangle.cpp	/^  char innodefilename[FILENAMESIZE];$/;"	m	struct:behavior	typeref:typename:char[]	file:
inpolyfilename	lib/nikfemm/lib/triangle/triangle.cpp	/^  char inpolyfilename[FILENAMESIZE];$/;"	m	struct:behavior	typeref:typename:char[]	file:
insegments	lib/nikfemm/lib/triangle/triangle.cpp	/^  int insegments;                               \/* Number of input segments. *\/$/;"	m	struct:mesh	typeref:typename:int	file:
insert	lib/nikfemm/src/unique_bimap.hpp	/^            void insert(T1 key1, T2 key2) {$/;"	f	class:nikfemm::unique_bimap	typeref:typename:void
inserttri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri inserttri;$/;"	v	typeref:struct:otri
insertvertexresult	lib/nikfemm/lib/triangle/triangle.cpp	/^enum insertvertexresult {SUCCESSFULVERTEX, ENCROACHINGVERTEX, VIOLATINGVERTEX,$/;"	g	file:
internalerror	lib/nikfemm/lib/triangle/triangle.cpp	/^void internalerror()$/;"	f	typeref:typename:void
intersect	lib/nikfemm/lib/triangle/triangle.cpp	/^  enum locateresult intersect;$/;"	v	typeref:enum:locateresult
invertices	lib/nikfemm/lib/triangle/triangle.cpp	/^  int invertices;                               \/* Number of input vertices. *\/$/;"	m	struct:mesh	typeref:typename:int	file:
itembytes	lib/nikfemm/lib/triangle/triangle.cpp	/^  int itembytes;$/;"	m	struct:memorypool	typeref:typename:int	file:
itemcount	lib/nikfemm/lib/triangle/triangle.cpp	/^int itemcount;$/;"	v	typeref:typename:int
items	lib/nikfemm/lib/triangle/triangle.cpp	/^  long items, maxitems;$/;"	m	struct:memorypool	typeref:typename:long	file:
itemsfirstblock	lib/nikfemm/lib/triangle/triangle.cpp	/^  int itemsfirstblock;$/;"	m	struct:memorypool	typeref:typename:int	file:
itemsperblock	lib/nikfemm/lib/triangle/triangle.cpp	/^  int itemsperblock;$/;"	m	struct:memorypool	typeref:typename:int	file:
j	lib/nikfemm/lib/triangle/triangle.cpp	/^  int i, j, k;$/;"	v	typeref:typename:int
j	lib/nikfemm/lib/triangle/triangle.cpp	/^  int i, j;$/;"	v	typeref:typename:int
jettison	lib/nikfemm/lib/triangle/triangle.cpp	/^  int regionattrib, convex, weighted, jettison;$/;"	m	struct:behavior	typeref:typename:int	file:
joinvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex joinvertex;$/;"	v	typeref:typename:vertex
k	lib/nikfemm/lib/triangle/triangle.cpp	/^  int i, j, k;$/;"	v	typeref:typename:int
kelvinTransformCentered	lib/nikfemm/src/mesh/mesh.cpp	/^    void Mesh::kelvinTransformCentered() {$/;"	f	class:nikfemm::Mesh	typeref:typename:void
key	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL key;                             \/* cos^2 of smallest (apical) angle. *\/$/;"	m	struct:badtriang	typeref:typename:REAL	file:
keydest	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex keydest;           \/* Used to verify that splay node is still live. *\/$/;"	m	struct:splaynode	typeref:typename:vertex	file:
keyedge	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri keyedge;                     \/* Lprev of an edge on the front. *\/$/;"	m	struct:splaynode	typeref:struct:otri	file:
killsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^#define killsubseg(/;"	d	file:
killtri	lib/nikfemm/lib/triangle/triangle.cpp	/^#define killtri(/;"	d	file:
killvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex killvertex;$/;"	v	typeref:typename:vertex
killvertexindex	lib/nikfemm/lib/triangle/triangle.cpp	/^  int killvertexindex;$/;"	v	typeref:typename:int
lastedge	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri firstedge, lastedge;$/;"	v	typeref:struct:otri
lastedge	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *lastedge;$/;"	v	typeref:struct:otri *
lastflip	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct flipstacker *lastflip;$/;"	m	struct:mesh	typeref:struct:flipstacker *	file:
lastvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex nextvertex, lastvertex;$/;"	v	typeref:typename:vertex
lchild	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct splaynode *lchild, *rchild;              \/* Children in splay tree. *\/$/;"	m	struct:splaynode	typeref:struct:splaynode *	file:
left	lib/nikfemm/lib/triangle/triangle.cpp	/^  int left, right;$/;"	v	typeref:typename:int
leftbasevertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex leftbasevertex, rightbasevertex;$/;"	v	typeref:typename:vertex
leftcand	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri leftcand, rightcand;$/;"	v	typeref:struct:otri
leftcasing	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri leftcasing, rightcasing;$/;"	v	typeref:struct:otri
leftchild	lib/nikfemm/lib/triangle/triangle.cpp	/^  int leftchild, rightchild;$/;"	v	typeref:typename:int
leftfinished	lib/nikfemm/lib/triangle/triangle.cpp	/^  int leftfinished, rightfinished;$/;"	v	typeref:typename:int
leftright	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct splaynode *leftright;$/;"	v	typeref:struct:splaynode *
leftsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub leftsubseg, rightsubseg;$/;"	v	typeref:struct:osub
lefttest	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL lefttest, righttest;$/;"	v	typeref:typename:REAL
lefttree	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct splaynode *lefttree, *righttree;$/;"	v	typeref:struct:splaynode *
lefttri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri lefttri, righttri, farlefttri, farrighttri;$/;"	v	typeref:struct:otri
lefttri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri lefttri, righttri;$/;"	v	typeref:struct:otri
leftvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex leftvertex, midvertex, rightvertex;$/;"	v	typeref:typename:vertex
leftvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex leftvertex, rightvertex, botvertex, topvertex, farvertex;$/;"	v	typeref:typename:vertex
leftvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex leftvertex, rightvertex, botvertex;$/;"	v	typeref:typename:vertex
leftvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex leftvertex, rightvertex;$/;"	v	typeref:typename:vertex
leftwin	lib/nikfemm/lib/triangle/showme.c	/^Window leftwin;$/;"	v	typeref:typename:Window
length	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL length, multiplier;$/;"	v	typeref:typename:REAL
length	lib/nikfemm/src/geometry/segment.cpp	/^    double Segment::length() {$/;"	f	class:nikfemm::Segment	typeref:typename:double
line_width	lib/nikfemm/lib/triangle/showme.c	/^int line_width;$/;"	v	typeref:typename:int
linegc	lib/nikfemm/lib/triangle/showme.c	/^GC linegc;$/;"	v	typeref:typename:GC
lnext	lib/nikfemm/lib/triangle/triangle.cpp	/^#define lnext(/;"	d	file:
lnextself	lib/nikfemm/lib/triangle/triangle.cpp	/^#define lnextself(/;"	d	file:
load_adj	lib/nikfemm/lib/triangle/showme.c	/^int load_adj(fname, subdomains, ptr)$/;"	f
load_edge	lib/nikfemm/lib/triangle/showme.c	/^int load_edge(fname, firstnumber, nodes, edges, edgeptr, normptr)$/;"	f
load_ele	lib/nikfemm/lib/triangle/showme.c	/^int load_ele(fname, firstnumber, nodes, elems, corners, ptr)$/;"	f
load_image	lib/nikfemm/lib/triangle/showme.c	/^int load_image(inc, image)$/;"	f
load_node	lib/nikfemm/lib/triangle/showme.c	/^int load_node(fname, firstnumber, nodes, dim, ptr, xmin, ymin, xmax, ymax)$/;"	f
load_part	lib/nikfemm/lib/triangle/showme.c	/^int load_part(fname, dim, firstnumber, elems, nodeptr, eleptr, parts,$/;"	f
load_poly	lib/nikfemm/lib/triangle/showme.c	/^int load_poly(inc, fname, firstnumber, pnodes, dim, edges, holes, nodeptr,$/;"	f
loaded	lib/nikfemm/lib/triangle/showme.c	/^int loaded[2][IMAGE_TYPES];$/;"	v	typeref:typename:int[2][]
locateresult	lib/nikfemm/lib/triangle/triangle.cpp	/^enum locateresult {INTRIANGLE, ONEDGE, ONVERTEX, OUTSIDE};$/;"	g	file:
loweriteration	lib/nikfemm/lib/triangle/showme.c	/^int loweriteration;$/;"	v	typeref:typename:int
lowerleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex lowerleft, lowerright;$/;"	v	typeref:typename:vertex
lowerright	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex lowerleft, lowerright;$/;"	v	typeref:typename:vertex
lprev	lib/nikfemm/lib/triangle/triangle.cpp	/^#define lprev(/;"	d	file:
lprevself	lib/nikfemm/lib/triangle/triangle.cpp	/^#define lprevself(/;"	d	file:
m	lib/nikfemm/lib/triangle/triangle.cpp	/^struct mesh *m;$/;"	v	typeref:struct:mesh *
m	lib/nikfemm/lib/triangle/triangle.cpp	/^struct mesh *m;$/;"	v	typeref:struct:struct struct mesh *
m	lib/nikfemm/src/matrix/coo.hpp	/^        uint64_t m = 0;  \/\/ rows$/;"	m	struct:nikfemm::MatCOO	typeref:typename:uint64_t
m	lib/nikfemm/src/matrix/coo.hpp	/^        uint64_t m;  \/\/ rows$/;"	m	struct:nikfemm::ElemCOO	typeref:typename:uint64_t
m	lib/nikfemm/src/matrix/csr.hpp	/^        uint64_t m, n;  \/\/ I, J  \/\/ rows,  columns$/;"	m	struct:nikfemm::MatCSR	typeref:typename:uint64_t
m	lib/nikfemm/src/matrix/simple_vector.hpp	/^        uint64_t m;  \/\/ columns$/;"	m	struct:nikfemm::CV	typeref:typename:uint64_t
main	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f	typeref:typename:void
main	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	examples/test/main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	lib/nikfemm/lib/triangle/showme.c	/^int main(argc, argv)$/;"	f
main	lib/nikfemm/lib/triangle/tricall.c	/^int main()$/;"	f	typeref:typename:int
main	src/main.cpp	/^int main(int argc, char** argv){$/;"	f	typeref:typename:int
mainwindow	lib/nikfemm/lib/triangle/showme.c	/^Window mainwindow;$/;"	v	typeref:typename:Window
make_button	lib/nikfemm/lib/triangle/showme.c	/^Window make_button(name, x, y, width)$/;"	f
make_buttons	lib/nikfemm/lib/triangle/showme.c	/^void make_buttons(y)$/;"	f
map1	lib/nikfemm/src/unique_bimap.hpp	/^            std::map<T1, T2> map1;$/;"	m	class:nikfemm::unique_bimap	typeref:typename:std::map<T1,T2>
map2	lib/nikfemm/src/unique_bimap.hpp	/^            std::map<T2, T1> map2;$/;"	m	class:nikfemm::unique_bimap	typeref:typename:std::map<T2,T1>
mark	lib/nikfemm/lib/triangle/triangle.cpp	/^#define mark(/;"	d	file:
markorg	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex markorg;$/;"	v	typeref:typename:vertex
maxarea	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL maxarea;$/;"	m	struct:behavior	typeref:typename:REAL	file:
maxevents	lib/nikfemm/lib/triangle/triangle.cpp	/^  int maxevents;$/;"	v	typeref:typename:int
maxitems	lib/nikfemm/lib/triangle/triangle.cpp	/^  long items, maxitems;$/;"	m	struct:memorypool	typeref:typename:long	file:
maxlen	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL maxlen;$/;"	v	typeref:typename:REAL
median	lib/nikfemm/lib/triangle/triangle.cpp	/^int median;$/;"	v	typeref:typename:int
memorypool	lib/nikfemm/lib/triangle/triangle.cpp	/^struct memorypool {$/;"	s	file:
memptr	lib/nikfemm/lib/triangle/triangle.cpp	/^  VOID *memptr;$/;"	v	typeref:typename:VOID *
mesh	lib/nikfemm/include/simulation.hpp	/^            Mesh mesh;$/;"	m	class:nikfemm::Simulation	typeref:typename:Mesh
mesh	lib/nikfemm/lib/triangle/triangle.cpp	/^struct mesh {$/;"	s	file:
mesh	lib/nikfemm/src/mesh/mesh.cpp	/^    void Mesh::mesh(Drawing &drawing) {$/;"	f	class:nikfemm::Mesh	typeref:typename:void
mesh_dim	lib/nikfemm/lib/triangle/triangle.cpp	/^  int mesh_dim;                                \/* Dimension (ought to be 2). *\/$/;"	m	struct:mesh	typeref:typename:int	file:
midtri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri midtri, tri1, tri2, tri3;$/;"	v	typeref:struct:otri
midvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex leftvertex, midvertex, rightvertex;$/;"	v	typeref:typename:vertex
minangle	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL minangle, goodangle, offconstant;$/;"	m	struct:behavior	typeref:typename:REAL	file:
minedge	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL apexlen, orglen, destlen, minedge;$/;"	v	typeref:typename:REAL
minedge	lib/nikfemm/lib/triangle/triangle.cpp	/^REAL minedge;$/;"	v	typeref:typename:REAL
minus1mod3	lib/nikfemm/lib/triangle/triangle.cpp	/^int minus1mod3[3] = {2, 0, 1};$/;"	v	typeref:typename:int[3]
mirrorflag	lib/nikfemm/lib/triangle/triangle.cpp	/^  int mirrorflag;$/;"	v	typeref:typename:int
move_inc	lib/nikfemm/lib/triangle/showme.c	/^void move_inc(inc)$/;"	f
moveevent	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct event *moveevent;$/;"	v	typeref:struct:event *
moveleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  int moveleft;$/;"	v	typeref:typename:int
mu_r	lib/nikfemm/src/mesh/vertex.hpp	/^            double mu_r; \/\/ relative permeability$/;"	m	class:nikfemm::Vertex	typeref:typename:double
mult	lib/nikfemm/src/matrix/simple_vector.cpp	/^    void CV::mult(CV& result, const MatCSR& mat, const CV& cv) {$/;"	f	class:nikfemm::CV	typeref:typename:void
mult	lib/nikfemm/src/matrix/simple_vector.cpp	/^    void CV::mult(CV& result, const double d, const CV& cv) {$/;"	f	class:nikfemm::CV	typeref:typename:void
multiplier	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL length, multiplier;$/;"	v	typeref:typename:REAL
n	lib/nikfemm/src/matrix/coo.hpp	/^        uint64_t n = 0;  \/\/ columns$/;"	m	struct:nikfemm::MatCOO	typeref:typename:uint64_t
n	lib/nikfemm/src/matrix/coo.hpp	/^        uint64_t n;  \/\/ columns$/;"	m	struct:nikfemm::ElemCOO	typeref:typename:uint64_t
n	lib/nikfemm/src/matrix/csr.hpp	/^        uint64_t m, n;  \/\/ I, J  \/\/ rows,  columns$/;"	m	struct:nikfemm::MatCSR	typeref:typename:uint64_t
neighborfilename	lib/nikfemm/lib/triangle/triangle.cpp	/^  char neighborfilename[FILENAMESIZE];$/;"	m	struct:behavior	typeref:typename:char[]	file:
neighborlist	lib/nikfemm/lib/triangle/triangle.h	/^  int *neighborlist;                                             \/* Out only *\/$/;"	m	struct:triangulateio	typeref:typename:int *
neighbors	lib/nikfemm/lib/triangle/triangle.cpp	/^  int edgesout, voronoi, neighbors, geomview;$/;"	m	struct:behavior	typeref:typename:int	file:
neighbortri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri neighbortri;$/;"	v	typeref:struct:otri
newbad	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct badtriang *newbad;$/;"	v	typeref:struct:badtriang *
newblock	lib/nikfemm/lib/triangle/triangle.cpp	/^  VOID **newblock;$/;"	v	typeref:typename:VOID **
newbotleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri newbotleft, newbotright;$/;"	v	typeref:struct:otri
newbotright	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri newbotleft, newbotright;$/;"	v	typeref:struct:otri
newevent	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct event *newevent;$/;"	v	typeref:struct:event *
newevent	lib/nikfemm/lib/triangle/triangle.cpp	/^struct event *newevent;$/;"	v	typeref:struct:event *
newflip	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct flipstacker *newflip;$/;"	v	typeref:struct:flipstacker *
newitem	lib/nikfemm/lib/triangle/triangle.cpp	/^  VOID *newitem;$/;"	v	typeref:typename:VOID *
newkey	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *newkey;$/;"	v	typeref:struct:otri *
neworg	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex neworg;$/;"	v	typeref:typename:vertex
newotri	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *newotri;$/;"	v	typeref:struct:otri *
newseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct badsubseg *newseg;$/;"	v	typeref:struct:badsubseg *
newsite	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex newsite;$/;"	v	typeref:typename:vertex
newsplaynode	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct splaynode *newsplaynode;$/;"	v	typeref:struct:splaynode *
newsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub newsubseg;$/;"	v	typeref:struct:osub
newsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  subseg *newsubseg;$/;"	v	typeref:typename:subseg *
newsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^struct osub *newsubseg;$/;"	v	typeref:struct:osub *
newtopright	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri newtopright;$/;"	v	typeref:struct:otri
newtriangle	lib/nikfemm/lib/triangle/triangle.cpp	/^  triangle *newtriangle;$/;"	v	typeref:typename:triangle *
newvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex newvertex;$/;"	v	typeref:typename:vertex
newvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex newvertex;$/;"	v	typeref:typename:vertex
nextapex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex nextapex;$/;"	v	typeref:typename:vertex
nextedge	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri nextedge, finaledge, dissolveedge;$/;"	v	typeref:struct:otri
nextedge	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri nextedge;$/;"	v	typeref:struct:otri
nextevent	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct event *nextevent;$/;"	v	typeref:struct:event *
nextitem	lib/nikfemm/lib/triangle/triangle.cpp	/^  VOID *nextitem;$/;"	m	struct:memorypool	typeref:typename:VOID *	file:
nextnonemptyq	lib/nikfemm/lib/triangle/triangle.cpp	/^  int nextnonemptyq[4096];$/;"	m	struct:mesh	typeref:typename:int[4096]	file:
nextras	lib/nikfemm/lib/triangle/triangle.cpp	/^  int nextras;                           \/* Number of attributes per vertex. *\/$/;"	m	struct:mesh	typeref:typename:int	file:
nexttri	lib/nikfemm/lib/triangle/triangle.cpp	/^  triangle nexttri;$/;"	v	typeref:typename:triangle
nexttriang	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct badtriang *nexttriang;             \/* Pointer to next bad triangle. *\/$/;"	m	struct:badtriang	typeref:struct:badtriang *	file:
nextvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex nextvertex, lastvertex;$/;"	v	typeref:typename:vertex
nikfemm	lib/nikfemm/include/simulation.hpp	/^namespace nikfemm {$/;"	n
nikfemm	lib/nikfemm/src/drawing/drawing.cpp	/^namespace nikfemm {$/;"	n	file:
nikfemm	lib/nikfemm/src/drawing/drawing.hpp	/^namespace nikfemm {$/;"	n
nikfemm	lib/nikfemm/src/drawing/drawing_region.cpp	/^namespace nikfemm {$/;"	n	file:
nikfemm	lib/nikfemm/src/drawing/drawing_region.hpp	/^namespace nikfemm {$/;"	n
nikfemm	lib/nikfemm/src/drawing/drawing_segment.hpp	/^namespace nikfemm {$/;"	n
nikfemm	lib/nikfemm/src/geometry/circle.cpp	/^namespace nikfemm {$/;"	n	file:
nikfemm	lib/nikfemm/src/geometry/circle.hpp	/^namespace nikfemm {$/;"	n
nikfemm	lib/nikfemm/src/geometry/geometry_common.hpp	/^namespace nikfemm {$/;"	n
nikfemm	lib/nikfemm/src/geometry/point.cpp	/^namespace nikfemm {$/;"	n	file:
nikfemm	lib/nikfemm/src/geometry/point.hpp	/^namespace nikfemm {$/;"	n
nikfemm	lib/nikfemm/src/geometry/segment.cpp	/^namespace nikfemm {$/;"	n	file:
nikfemm	lib/nikfemm/src/geometry/segment.hpp	/^namespace nikfemm {$/;"	n
nikfemm	lib/nikfemm/src/geometry/vector.cpp	/^namespace nikfemm {$/;"	n	file:
nikfemm	lib/nikfemm/src/geometry/vector.hpp	/^namespace nikfemm {$/;"	n
nikfemm	lib/nikfemm/src/matrix/coo.cpp	/^namespace nikfemm {$/;"	n	file:
nikfemm	lib/nikfemm/src/matrix/coo.hpp	/^namespace nikfemm {$/;"	n
nikfemm	lib/nikfemm/src/matrix/csr.cpp	/^namespace nikfemm {$/;"	n	file:
nikfemm	lib/nikfemm/src/matrix/csr.hpp	/^namespace nikfemm {$/;"	n
nikfemm	lib/nikfemm/src/matrix/simple_vector.cpp	/^namespace nikfemm {$/;"	n	file:
nikfemm	lib/nikfemm/src/matrix/simple_vector.hpp	/^namespace nikfemm {$/;"	n
nikfemm	lib/nikfemm/src/mesh/mesh.cpp	/^namespace nikfemm {$/;"	n	file:
nikfemm	lib/nikfemm/src/mesh/mesh.hpp	/^namespace nikfemm {$/;"	n
nikfemm	lib/nikfemm/src/mesh/vertex.cpp	/^namespace nikfemm {$/;"	n	file:
nikfemm	lib/nikfemm/src/mesh/vertex.hpp	/^namespace nikfemm {$/;"	n
nikfemm	lib/nikfemm/src/simulation.cpp	/^namespace nikfemm {$/;"	n	file:
nikfemm	lib/nikfemm/src/unique_bimap.hpp	/^namespace nikfemm {$/;"	n
nnz	lib/nikfemm/src/matrix/csr.hpp	/^        uint64_t nnz;$/;"	m	struct:nikfemm::MatCSR	typeref:typename:uint64_t
nobisect	lib/nikfemm/lib/triangle/triangle.cpp	/^  int nobisect;$/;"	m	struct:behavior	typeref:typename:int	file:
nobound	lib/nikfemm/lib/triangle/triangle.cpp	/^  int nobound, nopolywritten, nonodewritten, noelewritten, noiterationnum;$/;"	m	struct:behavior	typeref:typename:int	file:
node_dim	lib/nikfemm/lib/triangle/showme.c	/^int nodes[2], node_dim[2];$/;"	v	typeref:typename:int[2]
nodefilename	lib/nikfemm/lib/triangle/showme.c	/^char nodefilename[2][FILENAMESIZE];$/;"	v	typeref:typename:char[2][]
nodeptr	lib/nikfemm/lib/triangle/showme.c	/^REAL *nodeptr[2];$/;"	v	typeref:typename:REAL * [2]
nodes	lib/nikfemm/lib/triangle/showme.c	/^int nodes[2], node_dim[2];$/;"	v	typeref:typename:int[2]
nodewin	lib/nikfemm/lib/triangle/showme.c	/^Window nodewin[2];$/;"	v	typeref:typename:Window[2]
noelewritten	lib/nikfemm/lib/triangle/triangle.cpp	/^  int nobound, nopolywritten, nonodewritten, noelewritten, noiterationnum;$/;"	m	struct:behavior	typeref:typename:int	file:
noexact	lib/nikfemm/lib/triangle/triangle.cpp	/^  int noholes, noexact, conformdel;$/;"	m	struct:behavior	typeref:typename:int	file:
noholes	lib/nikfemm/lib/triangle/triangle.cpp	/^  int noholes, noexact, conformdel;$/;"	m	struct:behavior	typeref:typename:int	file:
noiterationnum	lib/nikfemm/lib/triangle/triangle.cpp	/^  int nobound, nopolywritten, nonodewritten, noelewritten, noiterationnum;$/;"	m	struct:behavior	typeref:typename:int	file:
nonodewritten	lib/nikfemm/lib/triangle/triangle.cpp	/^  int nobound, nopolywritten, nonodewritten, noelewritten, noiterationnum;$/;"	m	struct:behavior	typeref:typename:int	file:
nopolywritten	lib/nikfemm/lib/triangle/triangle.cpp	/^  int nobound, nopolywritten, nonodewritten, noelewritten, noiterationnum;$/;"	m	struct:behavior	typeref:typename:int	file:
normlist	lib/nikfemm/lib/triangle/triangle.h	/^  TRI_REAL *normlist;                \/* Used only with Voronoi diagram; out only *\/$/;"	m	struct:triangulateio	typeref:typename:TRI_REAL *
normptr	lib/nikfemm/lib/triangle/showme.c	/^REAL *normptr[2];$/;"	v	typeref:typename:REAL * [2]
notdone	lib/nikfemm/lib/triangle/triangle.cpp	/^  int notdone;$/;"	v	typeref:typename:int
notfound	lib/nikfemm/lib/triangle/triangle.cpp	/^  int notfound;$/;"	v	typeref:typename:int
nowblock	lib/nikfemm/lib/triangle/triangle.cpp	/^  VOID **firstblock, **nowblock;$/;"	m	struct:memorypool	typeref:typename:VOID **	file:
number	lib/nikfemm/lib/triangle/triangle.cpp	/^int number;$/;"	v	typeref:typename:int
numberofcorners	lib/nikfemm/lib/triangle/triangle.h	/^  int numberofcorners;                                           \/* In \/ out *\/$/;"	m	struct:triangulateio	typeref:typename:int
numberofedges	lib/nikfemm/lib/triangle/triangle.h	/^  int numberofedges;                                             \/* Out only *\/$/;"	m	struct:triangulateio	typeref:typename:int
numberofholes	lib/nikfemm/lib/triangle/triangle.h	/^  int numberofholes;                                      \/* In \/ copied out *\/$/;"	m	struct:triangulateio	typeref:typename:int
numberofpointattributes	lib/nikfemm/lib/triangle/triangle.h	/^  int numberofpointattributes;                                   \/* In \/ out *\/$/;"	m	struct:triangulateio	typeref:typename:int
numberofpoints	lib/nikfemm/lib/triangle/triangle.h	/^  int numberofpoints;                                            \/* In \/ out *\/$/;"	m	struct:triangulateio	typeref:typename:int
numberofregions	lib/nikfemm/lib/triangle/triangle.h	/^  int numberofregions;                                    \/* In \/ copied out *\/$/;"	m	struct:triangulateio	typeref:typename:int
numberofsegments	lib/nikfemm/lib/triangle/triangle.cpp	/^int numberofsegments;$/;"	v	typeref:typename:int
numberofsegments	lib/nikfemm/lib/triangle/triangle.h	/^  int numberofsegments;                                          \/* In \/ out *\/$/;"	m	struct:triangulateio	typeref:typename:int
numberoftriangleattributes	lib/nikfemm/lib/triangle/triangle.h	/^  int numberoftriangleattributes;                                \/* In \/ out *\/$/;"	m	struct:triangulateio	typeref:typename:int
numberoftriangles	lib/nikfemm/lib/triangle/triangle.h	/^  int numberoftriangles;                                         \/* In \/ out *\/$/;"	m	struct:triangulateio	typeref:typename:int
o3derrboundA	lib/nikfemm/lib/triangle/triangle.cpp	/^static REAL o3derrboundA, o3derrboundB, o3derrboundC;$/;"	v	typeref:typename:REAL	file:
o3derrboundB	lib/nikfemm/lib/triangle/triangle.cpp	/^static REAL o3derrboundA, o3derrboundB, o3derrboundC;$/;"	v	typeref:typename:REAL	file:
o3derrboundC	lib/nikfemm/lib/triangle/triangle.cpp	/^static REAL o3derrboundA, o3derrboundB, o3derrboundC;$/;"	v	typeref:typename:REAL	file:
oalen	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL oalen, dalen, odlen;$/;"	v	typeref:typename:REAL
odlen	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL oalen, dalen, odlen;$/;"	v	typeref:typename:REAL
offcenter	lib/nikfemm/lib/triangle/triangle.cpp	/^int offcenter;$/;"	v	typeref:typename:int
offconstant	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL minangle, goodangle, offconstant;$/;"	m	struct:behavior	typeref:typename:REAL	file:
offfilename	lib/nikfemm/lib/triangle/triangle.cpp	/^  char offfilename[FILENAMESIZE];$/;"	m	struct:behavior	typeref:typename:char[]	file:
onext	lib/nikfemm/lib/triangle/triangle.cpp	/^#define onext(/;"	d	file:
onextself	lib/nikfemm/lib/triangle/triangle.cpp	/^#define onextself(/;"	d	file:
operator !=	lib/nikfemm/src/drawing/drawing_region.cpp	/^    bool DrawingRegion::operator!=(const DrawingRegion& dr) const {$/;"	f	class:nikfemm::DrawingRegion	typeref:typename:bool
operator !=	lib/nikfemm/src/drawing/drawing_segment.hpp	/^        bool operator!=(const DrawingSegment& s) const {$/;"	f	struct:nikfemm::DrawingSegment	typeref:typename:bool
operator !=	lib/nikfemm/src/geometry/circle.cpp	/^    bool Circle::operator!=(const Circle& c) const {$/;"	f	class:nikfemm::Circle	typeref:typename:bool
operator !=	lib/nikfemm/src/geometry/point.cpp	/^    bool Point::operator!=(const Point& p) const {$/;"	f	class:nikfemm::Point	typeref:typename:bool
operator !=	lib/nikfemm/src/geometry/segment.cpp	/^    bool Segment::operator!=(const Segment& s) const {$/;"	f	class:nikfemm::Segment	typeref:typename:bool
operator !=	lib/nikfemm/src/geometry/vector.cpp	/^    bool Vector::operator!=(const Vector& v) const {$/;"	f	class:nikfemm::Vector	typeref:typename:bool
operator !=	lib/nikfemm/src/mesh/vertex.cpp	/^    bool Vertex::operator!=(const Vertex& v) const {$/;"	f	class:nikfemm::Vertex	typeref:typename:bool
operator ()	lib/nikfemm/src/drawing/drawing_region.hpp	/^        std::size_t operator()(const nikfemm::DrawingRegion& dr) const {$/;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	lib/nikfemm/src/drawing/drawing_segment.hpp	/^        inline bool operator()(const nikfemm::DrawingSegment& s1, const nikfemm::DrawingSegment&/;"	f	struct:std::equal_to	typeref:typename:bool
operator ()	lib/nikfemm/src/drawing/drawing_segment.hpp	/^        inline std::size_t operator()(const nikfemm::DrawingSegment& s) const {$/;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	lib/nikfemm/src/geometry/point.hpp	/^        inline bool operator()(const nikfemm::Point& p1, const nikfemm::Point& p2) const {$/;"	f	struct:std::equal_to	typeref:typename:bool
operator ()	lib/nikfemm/src/geometry/point.hpp	/^        inline std::size_t operator()(const nikfemm::Point& p) const {$/;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	lib/nikfemm/src/geometry/segment.hpp	/^        std::size_t operator()(const nikfemm::Segment& s) const {$/;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	lib/nikfemm/src/matrix/csr.cpp	/^    double MatCSR::operator()(uint64_t i, uint64_t j) const {$/;"	f	class:nikfemm::MatCSR	typeref:typename:double
operator ()	lib/nikfemm/src/mesh/vertex.hpp	/^                bool operator()(const Vertex* v1, const Vertex* v2) const {$/;"	f	struct:nikfemm::Vertex::atanCompare	typeref:typename:bool
operator ()	lib/nikfemm/src/mesh/vertex.hpp	/^        inline bool operator()(const nikfemm::Vertex* v1, const nikfemm::Vertex* v2) const {$/;"	f	struct:std::equal_to	typeref:typename:bool
operator ()	lib/nikfemm/src/mesh/vertex.hpp	/^        inline std::size_t operator()(const nikfemm::Vertex& v) const {$/;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	lib/nikfemm/src/mesh/vertex.hpp	/^        inline std::size_t operator()(const nikfemm::Vertex* v) const {$/;"	f	struct:std::hash	typeref:typename:std::size_t
operator *	lib/nikfemm/src/geometry/point.cpp	/^    Point Point::operator*(const double& d) const {$/;"	f	class:nikfemm::Point	typeref:typename:Point
operator *	lib/nikfemm/src/matrix/csr.cpp	/^    CV MatCSR::operator*(const CV& cv) const {$/;"	f	class:nikfemm::MatCSR	typeref:typename:CV
operator +	lib/nikfemm/src/geometry/point.cpp	/^    Point Point::operator+(const Point& p) const {$/;"	f	class:nikfemm::Point	typeref:typename:Point
operator -	lib/nikfemm/src/geometry/point.cpp	/^    Point Point::operator-(const Point& p) const {$/;"	f	class:nikfemm::Point	typeref:typename:Point
operator /	lib/nikfemm/src/geometry/point.cpp	/^    Point Point::operator\/(const double& d) const {$/;"	f	class:nikfemm::Point	typeref:typename:Point
operator <	lib/nikfemm/src/geometry/point.cpp	/^    bool Point::operator<(const Point& p) const {$/;"	f	class:nikfemm::Point	typeref:typename:bool
operator <	lib/nikfemm/src/matrix/coo.cpp	/^    bool ElemCOO::operator<(const ElemCOO &other) const {$/;"	f	class:nikfemm::ElemCOO	typeref:typename:bool
operator ==	lib/nikfemm/src/drawing/drawing_region.cpp	/^    bool DrawingRegion::operator==(const DrawingRegion& dr) const {$/;"	f	class:nikfemm::DrawingRegion	typeref:typename:bool
operator ==	lib/nikfemm/src/drawing/drawing_segment.hpp	/^        bool operator==(const DrawingSegment& s) const {$/;"	f	struct:nikfemm::DrawingSegment	typeref:typename:bool
operator ==	lib/nikfemm/src/geometry/circle.cpp	/^    bool Circle::operator==(const Circle& c) const {$/;"	f	class:nikfemm::Circle	typeref:typename:bool
operator ==	lib/nikfemm/src/geometry/point.cpp	/^    bool Point::operator==(const Point& p) const {$/;"	f	class:nikfemm::Point	typeref:typename:bool
operator ==	lib/nikfemm/src/geometry/segment.cpp	/^    bool Segment::operator==(const Segment& s) const {$/;"	f	class:nikfemm::Segment	typeref:typename:bool
operator ==	lib/nikfemm/src/geometry/vector.cpp	/^    bool Vector::operator==(const Vector& v) const {$/;"	f	class:nikfemm::Vector	typeref:typename:bool
operator ==	lib/nikfemm/src/matrix/coo.cpp	/^    bool ElemCOO::operator==(const ElemCOO &other) const {$/;"	f	class:nikfemm::ElemCOO	typeref:typename:bool
operator ==	lib/nikfemm/src/mesh/vertex.cpp	/^    bool Vertex::operator==(const Vertex& v) const {$/;"	f	class:nikfemm::Vertex	typeref:typename:bool
operator []	lib/nikfemm/src/matrix/simple_vector.cpp	/^    double CV::operator[](uint64_t i) const {$/;"	f	class:nikfemm::CV	typeref:typename:double
operator []	lib/nikfemm/src/matrix/simple_vector.cpp	/^    double& CV::operator[](uint64_t i) {$/;"	f	class:nikfemm::CV	typeref:typename:double &
oppoapex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex oppoapex;$/;"	v	typeref:typename:vertex
oppodest	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex oppoorg, oppodest;$/;"	v	typeref:typename:vertex
oppooppotri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri oppotri, oppooppotri;$/;"	v	typeref:struct:otri
oppoorg	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex oppoorg, oppodest;$/;"	v	typeref:typename:vertex
opposubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub opposubseg;$/;"	v	typeref:struct:osub
oppotri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri oppotri, oppooppotri;$/;"	v	typeref:struct:otri
oppotri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri oppotri;$/;"	v	typeref:struct:otri
oprev	lib/nikfemm/lib/triangle/triangle.cpp	/^#define oprev(/;"	d	file:
oprevself	lib/nikfemm/lib/triangle/triangle.cpp	/^#define oprevself(/;"	d	file:
order	lib/nikfemm/lib/triangle/triangle.cpp	/^  int order;$/;"	m	struct:behavior	typeref:typename:int	file:
org	lib/nikfemm/lib/triangle/triangle.cpp	/^#define org(/;"	d	file:
org1	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex org1, dest1, org2, dest2;$/;"	v	typeref:typename:vertex
org2	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex org1, dest1, org2, dest2;$/;"	v	typeref:typename:vertex
orglen	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL apexlen, orglen, destlen, minedge;$/;"	v	typeref:typename:REAL
orgorient	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL orgorient, destorient;$/;"	v	typeref:typename:REAL
orient	lib/nikfemm/lib/triangle/triangle.cpp	/^  int orient;                                         \/* Ranges from 0 to 2. *\/$/;"	m	struct:otri	typeref:typename:int	file:
orient3d	lib/nikfemm/lib/triangle/triangle.cpp	/^REAL orient3d(struct mesh *m, struct behavior *b,$/;"	f	typeref:typename:REAL	file:
orient3dadapt	lib/nikfemm/lib/triangle/triangle.cpp	/^REAL orient3dadapt(vertex pa, vertex pb, vertex pc, vertex pd,$/;"	f	typeref:typename:REAL	file:
orient3dcount	lib/nikfemm/lib/triangle/triangle.cpp	/^  long orient3dcount;           \/* Number of 3D orientation tests performed. *\/$/;"	m	struct:mesh	typeref:typename:long	file:
orientation	lib/nikfemm/src/geometry/point.cpp	/^    Orientation Point::orientation(Point p1, Point p2, Point p3) {$/;"	f	class:nikfemm::Point	typeref:typename:Orientation
osub	lib/nikfemm/lib/triangle/triangle.cpp	/^struct osub {$/;"	s	file:
otri	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri {$/;"	s	file:
otricopy	lib/nikfemm/lib/triangle/triangle.cpp	/^#define otricopy(/;"	d	file:
otriequal	lib/nikfemm/lib/triangle/triangle.cpp	/^#define otriequal(/;"	d	file:
outelefilename	lib/nikfemm/lib/triangle/triangle.cpp	/^  char outelefilename[FILENAMESIZE];$/;"	m	struct:behavior	typeref:typename:char[]	file:
outercasing	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri sidecasing, topcasing, outercasing;$/;"	v	typeref:struct:otri
outnodefilename	lib/nikfemm/lib/triangle/triangle.cpp	/^  char outnodefilename[FILENAMESIZE];$/;"	m	struct:behavior	typeref:typename:char[]	file:
outpolyfilename	lib/nikfemm/lib/triangle/triangle.cpp	/^  char outpolyfilename[FILENAMESIZE];$/;"	m	struct:behavior	typeref:typename:char[]	file:
p	lib/nikfemm/src/drawing/drawing_region.hpp	/^        Point p;$/;"	m	struct:nikfemm::DrawingRegion	typeref:typename:Point
p	lib/nikfemm/src/mesh/vertex.hpp	/^            Point p;$/;"	m	class:nikfemm::Vertex	typeref:typename:Point
p1	lib/nikfemm/src/drawing/drawing_segment.hpp	/^        uint64_t p1;$/;"	m	struct:nikfemm::DrawingSegment	typeref:typename:uint64_t
p1	lib/nikfemm/src/geometry/segment.hpp	/^        Point p1;$/;"	m	struct:nikfemm::Segment	typeref:typename:Point
p2	lib/nikfemm/src/drawing/drawing_segment.hpp	/^        uint64_t p2;$/;"	m	struct:nikfemm::DrawingSegment	typeref:typename:uint64_t
p2	lib/nikfemm/src/geometry/segment.hpp	/^        Point p2;$/;"	m	struct:nikfemm::Segment	typeref:typename:Point
pa	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex pa;$/;"	v	typeref:typename:vertex
parent	lib/nikfemm/lib/triangle/triangle.cpp	/^  int parent;$/;"	v	typeref:typename:int
parsecommandline	lib/nikfemm/lib/triangle/showme.c	/^void parsecommandline(argc, argv)$/;"	f
partcenter	lib/nikfemm/lib/triangle/showme.c	/^REAL *partcenter[2], *partshift[2];$/;"	v	typeref:typename:REAL * [2]
partfilename	lib/nikfemm/lib/triangle/showme.c	/^char partfilename[2][FILENAMESIZE];$/;"	v	typeref:typename:char[2][]
partpart	lib/nikfemm/lib/triangle/showme.c	/^int *partpart[2];$/;"	v	typeref:typename:int * [2]
partshift	lib/nikfemm/lib/triangle/showme.c	/^REAL *partcenter[2], *partshift[2];$/;"	v	typeref:typename:REAL * [2]
partwin	lib/nikfemm/lib/triangle/showme.c	/^Window partwin[2];$/;"	v	typeref:typename:Window[2]
pathblock	lib/nikfemm/lib/triangle/triangle.cpp	/^  VOID **pathblock;$/;"	m	struct:memorypool	typeref:typename:VOID **	file:
pathitem	lib/nikfemm/lib/triangle/triangle.cpp	/^  VOID *pathitem;$/;"	m	struct:memorypool	typeref:typename:VOID *	file:
pathitemsleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  int pathitemsleft;$/;"	m	struct:memorypool	typeref:typename:int	file:
pb	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex pb;$/;"	v	typeref:typename:vertex
pc	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex pc;$/;"	v	typeref:typename:vertex
pd	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex pd;$/;"	v	typeref:typename:vertex
pivot	lib/nikfemm/lib/triangle/triangle.cpp	/^  int pivot;$/;"	v	typeref:typename:int
pivot1	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL pivot1, pivot2;$/;"	v	typeref:typename:REAL
pivot2	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL pivot1, pivot2;$/;"	v	typeref:typename:REAL
pivotx	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL pivotx, pivoty;$/;"	v	typeref:typename:REAL
pivoty	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL pivotx, pivoty;$/;"	v	typeref:typename:REAL
plot	lib/nikfemm/src/drawing/drawing.cpp	/^    void Drawing::plot() {$/;"	f	class:nikfemm::Drawing	typeref:typename:void
plot	lib/nikfemm/src/matrix/coo.cpp	/^    void MatCOO::plot() {$/;"	f	class:nikfemm::MatCOO	typeref:typename:void
plot	lib/nikfemm/src/mesh/mesh.cpp	/^    void Mesh::plot() {$/;"	f	class:nikfemm::Mesh	typeref:typename:void
plus1mod3	lib/nikfemm/lib/triangle/triangle.cpp	/^int plus1mod3[3] = {1, 2, 0};$/;"	v	typeref:typename:int[3]
pointOnSegment	lib/nikfemm/src/geometry/segment.cpp	/^    bool Segment::pointOnSegment(Point p, Segment s) {$/;"	f	class:nikfemm::Segment	typeref:typename:bool
pointattributelist	lib/nikfemm/lib/triangle/triangle.h	/^  TRI_REAL *pointattributelist;                                      \/* In \/ out *\/$/;"	m	struct:triangulateio	typeref:typename:TRI_REAL *
pointlist	lib/nikfemm/lib/triangle/triangle.h	/^  TRI_REAL *pointlist;                                               \/* In \/ out *\/$/;"	m	struct:triangulateio	typeref:typename:TRI_REAL *
pointmarkerlist	lib/nikfemm/lib/triangle/triangle.h	/^  int *pointmarkerlist;                                          \/* In \/ out *\/$/;"	m	struct:triangulateio	typeref:typename:int *
points	lib/nikfemm/src/drawing/drawing.hpp	/^        std::vector<Point> points;$/;"	m	struct:nikfemm::Drawing	typeref:typename:std::vector<Point>
poly	lib/nikfemm/lib/triangle/triangle.cpp	/^  int poly, refine, quality, vararea, fixedarea, usertest;$/;"	m	struct:behavior	typeref:typename:int	file:
poly_dim	lib/nikfemm/lib/triangle/showme.c	/^int polynodes[2], poly_dim[2], polyedges[2], polyholes[2];$/;"	v	typeref:typename:int[2]
polyedgeptr	lib/nikfemm/lib/triangle/showme.c	/^int *polyedgeptr[2];$/;"	v	typeref:typename:int * [2]
polyedges	lib/nikfemm/lib/triangle/showme.c	/^int polynodes[2], poly_dim[2], polyedges[2], polyholes[2];$/;"	v	typeref:typename:int[2]
polyfile	lib/nikfemm/lib/triangle/triangle.cpp	/^FILE *polyfile;$/;"	v	typeref:typename:FILE *
polyfilename	lib/nikfemm/lib/triangle/showme.c	/^char polyfilename[2][FILENAMESIZE];$/;"	v	typeref:typename:char[2][]
polyfilename	lib/nikfemm/lib/triangle/triangle.cpp	/^char *polyfilename;$/;"	v	typeref:typename:char *
polyholeptr	lib/nikfemm/lib/triangle/showme.c	/^REAL *polynodeptr[2], *polyholeptr[2];$/;"	v	typeref:typename:REAL * [2]
polyholes	lib/nikfemm/lib/triangle/showme.c	/^int polynodes[2], poly_dim[2], polyedges[2], polyholes[2];$/;"	v	typeref:typename:int[2]
polynodeptr	lib/nikfemm/lib/triangle/showme.c	/^REAL *polynodeptr[2], *polyholeptr[2];$/;"	v	typeref:typename:REAL * [2]
polynodes	lib/nikfemm/lib/triangle/showme.c	/^int polynodes[2], poly_dim[2], polyedges[2], polyholes[2];$/;"	v	typeref:typename:int[2]
polywin	lib/nikfemm/lib/triangle/showme.c	/^Window polywin[2];$/;"	v	typeref:typename:Window[2]
pool	lib/nikfemm/lib/triangle/triangle.cpp	/^struct memorypool *pool;$/;"	v	typeref:struct:memorypool *
poortri	lib/nikfemm/lib/triangle/triangle.cpp	/^  triangle poortri;                       \/* A skinny or too-large triangle. *\/$/;"	m	struct:badtriang	typeref:typename:triangle	file:
population	lib/nikfemm/lib/triangle/triangle.cpp	/^  long population, totalpopulation;$/;"	v	typeref:typename:long
posexponent	lib/nikfemm/lib/triangle/triangle.cpp	/^  int posexponent;$/;"	v	typeref:typename:int
prevflip	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct flipstacker *prevflip;               \/* Previous flip in the stack. *\/$/;"	m	struct:flipstacker	typeref:struct:flipstacker *	file:
prevlink	lib/nikfemm/lib/triangle/triangle.cpp	/^  triangle *prevlink;$/;"	v	typeref:typename:triangle *
print	lib/nikfemm/lib/triangle/showme.c	/^void print(inc, image, xmin, ymin, xmax, ymax, eps)$/;"	f
print	lib/nikfemm/src/matrix/csr.cpp	/^    void MatCSR::print() {$/;"	f	class:nikfemm::MatCSR	typeref:typename:void
print	lib/nikfemm/src/matrix/simple_vector.cpp	/^    void CV::print() {$/;"	f	class:nikfemm::CV	typeref:typename:void
printCSR	lib/nikfemm/src/matrix/csr.cpp	/^    void MatCSR::printCSR() {$/;"	f	class:nikfemm::MatCSR	typeref:typename:void
print_adj	lib/nikfemm/lib/triangle/showme.c	/^void print_adj(adjfile, dim, subdomains, ptr, center, xscale, yscale,$/;"	f
print_edge	lib/nikfemm/lib/triangle/showme.c	/^void print_edge(edgefile, nodes, dim, edges, nodeptr, edgeptr, normptr,$/;"	f
print_ele	lib/nikfemm/lib/triangle/showme.c	/^void print_ele(elefile, nodes, dim, elems, corners, nodeptr, eleptr,$/;"	f
print_head	lib/nikfemm/lib/triangle/showme.c	/^int print_head(fname, file, llcornerx, llcornery, eps)$/;"	f
print_node	lib/nikfemm/lib/triangle/showme.c	/^void print_node(nodefile, nodes, dim, ptr, xscale, yscale,$/;"	f
print_poly	lib/nikfemm/lib/triangle/showme.c	/^void print_poly(polyfile, nodes, dim, edges, holes, nodeptr, edgeptr, holeptr,$/;"	f
printsh	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub printsh;$/;"	v	typeref:struct:osub
printtri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri printtri;$/;"	v	typeref:struct:otri
printvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex printvertex;$/;"	v	typeref:typename:vertex
pswin	lib/nikfemm/lib/triangle/showme.c	/^Window pswin;$/;"	v	typeref:typename:Window
ptr	lib/nikfemm/lib/triangle/triangle.cpp	/^  triangle ptr;                         \/* Temporary variable used by sym(). *\/$/;"	v	typeref:typename:triangle
ptr	lib/nikfemm/lib/triangle/triangle.cpp	/^  triangle ptr;                       \/* Temporary variable used by onext(). *\/$/;"	v	typeref:typename:triangle
ptr	lib/nikfemm/lib/triangle/triangle.cpp	/^  triangle ptr;                     \/* Temporary variable used by stpivot(). *\/$/;"	v	typeref:typename:triangle
ptr	lib/nikfemm/lib/triangle/triangle.cpp	/^  triangle ptr;           \/* Temporary variable used by oprev() and dnext(). *\/$/;"	v	typeref:typename:triangle
ptr	lib/nikfemm/lib/triangle/triangle.cpp	/^  triangle ptr;   \/* Temporary variable used by sym(), onext(), and oprev(). *\/$/;"	v	typeref:typename:triangle
qnxnto	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
quality	lib/nikfemm/lib/triangle/triangle.cpp	/^  int poly, refine, quality, vararea, fixedarea, usertest;$/;"	m	struct:behavior	typeref:typename:int	file:
queuefront	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct badtriang *queuefront[4096];$/;"	m	struct:mesh	typeref:struct:badtriang * [4096]	file:
queuenumber	lib/nikfemm/lib/triangle/triangle.cpp	/^  int queuenumber;$/;"	v	typeref:typename:int
queuetail	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct badtriang *queuetail[4096];$/;"	m	struct:mesh	typeref:struct:badtriang * [4096]	file:
quiet	lib/nikfemm/lib/triangle/showme.c	/^int quiet, fillelem, bw_ps, explode;$/;"	v	typeref:typename:int
quiet	lib/nikfemm/lib/triangle/triangle.cpp	/^  int quiet, verbose;$/;"	m	struct:behavior	typeref:typename:int	file:
quitwin	lib/nikfemm/lib/triangle/showme.c	/^Window quitwin;$/;"	v	typeref:typename:Window
radius	lib/nikfemm/src/geometry/circle.hpp	/^            double radius;$/;"	m	struct:nikfemm::Circle	typeref:typename:double
radius	lib/nikfemm/src/mesh/mesh.hpp	/^        double radius = 0;$/;"	m	struct:nikfemm::Mesh	typeref:typename:double
randomseed	lib/nikfemm/lib/triangle/triangle.cpp	/^unsigned long randomseed;                     \/* Current random number seed. *\/$/;"	v	typeref:typename:unsigned long
rchild	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct splaynode *lchild, *rchild;              \/* Children in splay tree. *\/$/;"	m	struct:splaynode	typeref:struct:splaynode *	file:
readline	lib/nikfemm/lib/triangle/showme.c	/^char *readline(string, infile, infilename)$/;"	f
readnodefile	lib/nikfemm/lib/triangle/triangle.cpp	/^  int readnodefile;                           \/* Has a .node file been read? *\/$/;"	m	struct:mesh	typeref:typename:int	file:
recenttri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri recenttri;$/;"	m	struct:mesh	typeref:struct:otri	file:
refine	lib/nikfemm/lib/triangle/triangle.cpp	/^  int poly, refine, quality, vararea, fixedarea, usertest;$/;"	m	struct:behavior	typeref:typename:int	file:
region_attribute	lib/nikfemm/src/drawing/drawing.hpp	/^        double region_attribute;$/;"	m	struct:nikfemm::PredefinedRegion	typeref:typename:double
region_attribute	lib/nikfemm/src/drawing/drawing_region.hpp	/^        uint64_t region_attribute;$/;"	m	struct:nikfemm::DrawingRegion	typeref:typename:uint64_t
regionattrib	lib/nikfemm/lib/triangle/triangle.cpp	/^  int regionattrib, convex, weighted, jettison;$/;"	m	struct:behavior	typeref:typename:int	file:
regionlist	lib/nikfemm/lib/triangle/triangle.h	/^  TRI_REAL *regionlist;                      \/* In \/ pointer to array copied out *\/$/;"	m	struct:triangulateio	typeref:typename:TRI_REAL *
regions	lib/nikfemm/lib/triangle/triangle.cpp	/^  int regions;                                   \/* Number of input regions. *\/$/;"	m	struct:mesh	typeref:typename:int	file:
regions	lib/nikfemm/src/drawing/drawing.hpp	/^        std::unordered_set<DrawingRegion> regions;$/;"	m	struct:nikfemm::Drawing	typeref:typename:std::unordered_set<DrawingRegion>
removeLeft	lib/nikfemm/src/unique_bimap.hpp	/^            void removeLeft(T1 key1) {$/;"	f	class:nikfemm::unique_bimap	typeref:typename:void
removeRight	lib/nikfemm/src/unique_bimap.hpp	/^            void removeRight(T2 key2) {$/;"	f	class:nikfemm::unique_bimap	typeref:typename:void
report	lib/nikfemm/lib/triangle/tricall.c	/^void report(io, markers, reporttriangles, reportneighbors, reportsegments,$/;"	f
report	lib/nikfemm/src/triangle/util.cpp	/^void report(struct triangulateio * io, int markers, int reporttriangles, int reportneighbors, in/;"	f	typeref:typename:void
resetwin	lib/nikfemm/lib/triangle/showme.c	/^Window resetwin;$/;"	v	typeref:typename:Window
result	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct badtriang *result;$/;"	v	typeref:struct:badtriang *
resulterrbound	lib/nikfemm/lib/triangle/triangle.cpp	/^static REAL resulterrbound;$/;"	v	typeref:typename:REAL	file:
rgb	lib/nikfemm/lib/triangle/showme.c	/^XColor rgb[MAXCOLORS];$/;"	v	typeref:typename:XColor[]
right	lib/nikfemm/lib/triangle/triangle.cpp	/^  int left, right;$/;"	v	typeref:typename:int
rightbasevertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex leftbasevertex, rightbasevertex;$/;"	v	typeref:typename:vertex
rightcand	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri leftcand, rightcand;$/;"	v	typeref:struct:otri
rightcasing	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri leftcasing, rightcasing;$/;"	v	typeref:struct:otri
rightchild	lib/nikfemm/lib/triangle/triangle.cpp	/^  int leftchild, rightchild;$/;"	v	typeref:typename:int
rightfinished	lib/nikfemm/lib/triangle/triangle.cpp	/^  int leftfinished, rightfinished;$/;"	v	typeref:typename:int
rightofchild	lib/nikfemm/lib/triangle/triangle.cpp	/^  int rightofroot, rightofchild;$/;"	v	typeref:typename:int
rightofroot	lib/nikfemm/lib/triangle/triangle.cpp	/^  int rightofroot, rightofchild;$/;"	v	typeref:typename:int
rightsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub leftsubseg, rightsubseg;$/;"	v	typeref:struct:osub
rightsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub rightsubseg;$/;"	v	typeref:struct:osub
righttest	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL lefttest, righttest;$/;"	v	typeref:typename:REAL
righttree	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct splaynode *lefttree, *righttree;$/;"	v	typeref:struct:splaynode *
righttri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri lefttri, righttri, farlefttri, farrighttri;$/;"	v	typeref:struct:otri
righttri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri lefttri, righttri;$/;"	v	typeref:struct:otri
rightvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex botvertex, rightvertex;$/;"	v	typeref:typename:vertex
rightvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex leftvertex, midvertex, rightvertex;$/;"	v	typeref:typename:vertex
rightvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex leftvertex, rightvertex, botvertex, topvertex, farvertex;$/;"	v	typeref:typename:vertex
rightvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex leftvertex, rightvertex, botvertex;$/;"	v	typeref:typename:vertex
rightvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex leftvertex, rightvertex;$/;"	v	typeref:typename:vertex
rightwin	lib/nikfemm/lib/triangle/showme.c	/^Window rightwin;$/;"	v	typeref:typename:Window
rnext	lib/nikfemm/lib/triangle/triangle.cpp	/^#define rnext(/;"	d	file:
rnextself	lib/nikfemm/lib/triangle/triangle.cpp	/^#define rnextself(/;"	d	file:
rootmap	lib/nikfemm/lib/triangle/showme.c	/^Colormap rootmap;$/;"	v	typeref:typename:Colormap
rootwindow	lib/nikfemm/lib/triangle/showme.c	/^Window rootwindow;$/;"	v	typeref:typename:Window
rprev	lib/nikfemm/lib/triangle/triangle.cpp	/^#define rprev(/;"	d	file:
rprevself	lib/nikfemm/lib/triangle/triangle.cpp	/^#define rprevself(/;"	d	file:
s	lib/nikfemm/lib/triangle/triangle.cpp	/^struct osub *s;$/;"	v	typeref:struct:osub *
s0	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL s0, t0;$/;"	v	typeref:typename:REAL
s1	lib/nikfemm/lib/triangle/triangle.cpp	/^  INEXACT REAL s1, t1;$/;"	v	typeref:typename:INEXACT REAL
sampleblock	lib/nikfemm/lib/triangle/triangle.cpp	/^  VOID **sampleblock;$/;"	v	typeref:typename:VOID **
samples	lib/nikfemm/lib/triangle/triangle.cpp	/^  long samples;              \/* Number of random samples for point location. *\/$/;"	m	struct:mesh	typeref:typename:long	file:
samplesleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  long samplesperblock, totalsamplesleft, samplesleft;$/;"	v	typeref:typename:long
samplesperblock	lib/nikfemm/lib/triangle/triangle.cpp	/^  long samplesperblock, totalsamplesleft, samplesleft;$/;"	v	typeref:typename:long
sampletri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri sampletri;$/;"	v	typeref:struct:otri
saveexact	lib/nikfemm/lib/triangle/triangle.cpp	/^  int saveexact;$/;"	v	typeref:typename:int
sbond	lib/nikfemm/lib/triangle/triangle.cpp	/^#define sbond(/;"	d	file:
scale_expansion_zeroelim	lib/nikfemm/lib/triangle/triangle.cpp	/^int scale_expansion_zeroelim(int elen, REAL *e, REAL b, REAL *h)$/;"	f	typeref:typename:int	file:
screen	lib/nikfemm/lib/triangle/showme.c	/^int screen;$/;"	v	typeref:typename:int
sdecode	lib/nikfemm/lib/triangle/triangle.cpp	/^#define sdecode(/;"	d	file:
sdest	lib/nikfemm/lib/triangle/triangle.cpp	/^#define sdest(/;"	d	file:
sdissolve	lib/nikfemm/lib/triangle/triangle.cpp	/^#define sdissolve(/;"	d	file:
searchdist	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL searchdist, dist;$/;"	v	typeref:typename:REAL
searchedge	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri searchedge;$/;"	v	typeref:struct:otri
searchpoint	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL searchpoint[2];$/;"	v	typeref:typename:REAL[2]
searchpoint	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex searchpoint;$/;"	v	typeref:typename:vertex
searchtri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri searchtri;$/;"	v	typeref:struct:otri
searchtri	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *searchtri;$/;"	v	typeref:struct:otri *
searchvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex searchvertex;$/;"	v	typeref:typename:vertex
secondvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex firstvertex, secondvertex;$/;"	v	typeref:typename:vertex
segdest	lib/nikfemm/lib/triangle/triangle.cpp	/^#define segdest(/;"	d	file:
segmentdest	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex segmentorg, segmentdest;$/;"	v	typeref:typename:vertex
segmentflaws	lib/nikfemm/lib/triangle/triangle.cpp	/^int segmentflaws;$/;"	v	typeref:typename:int
segmentlist	lib/nikfemm/lib/triangle/triangle.cpp	/^int *segmentlist;$/;"	v	typeref:typename:int *
segmentlist	lib/nikfemm/lib/triangle/triangle.h	/^  int *segmentlist;                                              \/* In \/ out *\/$/;"	m	struct:triangulateio	typeref:typename:int *
segmentmarkerlist	lib/nikfemm/lib/triangle/triangle.cpp	/^int *segmentmarkerlist;$/;"	v	typeref:typename:int *
segmentmarkerlist	lib/nikfemm/lib/triangle/triangle.h	/^  int *segmentmarkerlist;                                        \/* In \/ out *\/$/;"	m	struct:triangulateio	typeref:typename:int *
segmentmarkers	lib/nikfemm/lib/triangle/triangle.cpp	/^  int segmentmarkers;$/;"	v	typeref:typename:int
segmentnumber	lib/nikfemm/lib/triangle/triangle.cpp	/^  long elementnumber, segmentnumber;$/;"	v	typeref:typename:long
segmentorg	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex segmentorg, segmentdest;$/;"	v	typeref:typename:vertex
segments	lib/nikfemm/src/drawing/drawing.hpp	/^        std::unordered_set<DrawingSegment> segments;$/;"	m	struct:nikfemm::Drawing	typeref:typename:std::unordered_set<DrawingSegment>
segmentsIntersect	lib/nikfemm/src/geometry/segment.cpp	/^    bool Segment::segmentsIntersect(Point s1p1, Point s1p2, Point s2p1, Point s2p2) {$/;"	f	class:nikfemm::Segment	typeref:typename:bool
segmentsIntersect	lib/nikfemm/src/geometry/segment.cpp	/^    bool Segment::segmentsIntersect(Segment s1, Segment s2) {$/;"	f	class:nikfemm::Segment	typeref:typename:bool
segorg	lib/nikfemm/lib/triangle/triangle.cpp	/^#define segorg(/;"	d	file:
sencode	lib/nikfemm/lib/triangle/triangle.cpp	/^#define sencode(/;"	d	file:
set_filenames	lib/nikfemm/lib/triangle/showme.c	/^void set_filenames(filename, lowermeshnumber)$/;"	f
setapex	lib/nikfemm/lib/triangle/triangle.cpp	/^#define setapex(/;"	d	file:
setareabound	lib/nikfemm/lib/triangle/triangle.cpp	/^#define setareabound(/;"	d	file:
setdest	lib/nikfemm/lib/triangle/triangle.cpp	/^#define setdest(/;"	d	file:
setelemattribute	lib/nikfemm/lib/triangle/triangle.cpp	/^#define setelemattribute(/;"	d	file:
setmark	lib/nikfemm/lib/triangle/triangle.cpp	/^#define setmark(/;"	d	file:
setorg	lib/nikfemm/lib/triangle/triangle.cpp	/^#define setorg(/;"	d	file:
setsdest	lib/nikfemm/lib/triangle/triangle.cpp	/^#define setsdest(/;"	d	file:
setsegdest	lib/nikfemm/lib/triangle/triangle.cpp	/^#define setsegdest(/;"	d	file:
setsegorg	lib/nikfemm/lib/triangle/triangle.cpp	/^#define setsegorg(/;"	d	file:
setsorg	lib/nikfemm/lib/triangle/triangle.cpp	/^#define setsorg(/;"	d	file:
setvertex2tri	lib/nikfemm/lib/triangle/triangle.cpp	/^#define setvertex2tri(/;"	d	file:
setvertexmark	lib/nikfemm/lib/triangle/triangle.cpp	/^#define setvertexmark(/;"	d	file:
setvertextype	lib/nikfemm/lib/triangle/triangle.cpp	/^#define setvertextype(/;"	d	file:
shorg	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex shorg;$/;"	v	typeref:typename:vertex
shouldbedelaunay	lib/nikfemm/lib/triangle/triangle.cpp	/^  int shouldbedelaunay;$/;"	v	typeref:typename:int
showme_foreground	lib/nikfemm/lib/triangle/showme.c	/^int showme_foreground;$/;"	v	typeref:typename:int
showme_init	lib/nikfemm/lib/triangle/showme.c	/^void showme_init()$/;"	f	typeref:typename:void
showme_window	lib/nikfemm/lib/triangle/showme.c	/^void showme_window(argc, argv)$/;"	f
sidecasing	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri sidecasing, topcasing, outercasing;$/;"	v	typeref:struct:otri
sides	lib/nikfemm/lib/triangle/triangle.cpp	/^  int sides;$/;"	v	typeref:typename:int
smallest	lib/nikfemm/lib/triangle/triangle.cpp	/^  int smallest;$/;"	v	typeref:typename:int
snext	lib/nikfemm/lib/triangle/triangle.cpp	/^#define snext(/;"	d	file:
snextself	lib/nikfemm/lib/triangle/triangle.cpp	/^#define snextself(/;"	d	file:
sorg	lib/nikfemm/lib/triangle/triangle.cpp	/^#define sorg(/;"	d	file:
sortarray	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex *sortarray;$/;"	v	typeref:typename:vertex *
sortarray	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex *sortarray;$/;"	v	typeref:typename:vertex *
spivot	lib/nikfemm/lib/triangle/triangle.cpp	/^#define spivot(/;"	d	file:
spivotself	lib/nikfemm/lib/triangle/triangle.cpp	/^#define spivotself(/;"	d	file:
splaynode	lib/nikfemm/lib/triangle/triangle.cpp	/^struct splaynode {$/;"	s	file:
splaynodes	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct memorypool splaynodes;$/;"	m	struct:mesh	typeref:struct:memorypool	file:
splayroot	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct splaynode *splayroot;$/;"	v	typeref:struct:splaynode *
splayroot	lib/nikfemm/lib/triangle/triangle.cpp	/^struct splaynode *splayroot;$/;"	v	typeref:struct:splaynode *
splaytree	lib/nikfemm/lib/triangle/triangle.cpp	/^struct splaynode *splaytree;$/;"	v	typeref:struct:splaynode *
splitseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  int splitseg;$/;"	m	struct:behavior	typeref:typename:int	file:
splitseg	lib/nikfemm/lib/triangle/triangle.cpp	/^struct osub *splitseg;$/;"	v	typeref:struct:osub *
splitter	lib/nikfemm/lib/triangle/triangle.cpp	/^static REAL splitter;       \/* Used to split REAL factors for exact multiplication. *\/$/;"	v	typeref:typename:REAL	file:
sptr	lib/nikfemm/lib/triangle/triangle.cpp	/^  subseg sptr;                      \/* Temporary variable used by tspivot(). *\/$/;"	v	typeref:typename:subseg
sptr	lib/nikfemm/lib/triangle/triangle.cpp	/^  subseg sptr;         \/* Temporary variable used by spivot() and tspivot(). *\/$/;"	v	typeref:typename:subseg
squareSum	lib/nikfemm/src/matrix/simple_vector.cpp	/^    double CV::squareSum(const CV& cv) {$/;"	f	class:nikfemm::CV	typeref:typename:double
ss	lib/nikfemm/lib/triangle/triangle.cpp	/^  subseg *ss;$/;"	m	struct:osub	typeref:typename:subseg *	file:
ssorient	lib/nikfemm/lib/triangle/triangle.cpp	/^  int ssorient;                                       \/* Ranges from 0 to 1. *\/$/;"	m	struct:osub	typeref:typename:int	file:
ssym	lib/nikfemm/lib/triangle/triangle.cpp	/^#define ssym(/;"	d	file:
ssymself	lib/nikfemm/lib/triangle/triangle.cpp	/^#define ssymself(/;"	d	file:
start_image	lib/nikfemm/lib/triangle/showme.c	/^int start_image, current_image;$/;"	v	typeref:typename:int
start_inc	lib/nikfemm/lib/triangle/showme.c	/^int start_inc, current_inc;$/;"	v	typeref:typename:int
startghost	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *startghost;$/;"	v	typeref:struct:otri *
starttri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri starttri;$/;"	v	typeref:struct:otri
std	lib/nikfemm/src/drawing/drawing_region.hpp	/^namespace std {$/;"	n
std	lib/nikfemm/src/drawing/drawing_segment.hpp	/^namespace std {$/;"	n
std	lib/nikfemm/src/geometry/point.hpp	/^namespace std {$/;"	n
std	lib/nikfemm/src/geometry/segment.hpp	/^namespace std {$/;"	n
std	lib/nikfemm/src/mesh/vertex.hpp	/^namespace std {$/;"	n
stdissolve	lib/nikfemm/lib/triangle/triangle.cpp	/^#define stdissolve(/;"	d	file:
steiner	lib/nikfemm/lib/triangle/triangle.cpp	/^  int steiner;$/;"	m	struct:behavior	typeref:typename:int	file:
steinerleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  int steinerleft;                 \/* Number of Steiner points not yet used. *\/$/;"	m	struct:mesh	typeref:typename:int	file:
stopatsubsegment	lib/nikfemm/lib/triangle/triangle.cpp	/^int stopatsubsegment;$/;"	v	typeref:typename:int
stpivot	lib/nikfemm/lib/triangle/triangle.cpp	/^#define stpivot(/;"	d	file:
sub	lib/nikfemm/src/matrix/simple_vector.cpp	/^    void CV::sub(CV& result, const CV& cv, const double d) {$/;"	f	class:nikfemm::CV	typeref:typename:void
sub	lib/nikfemm/src/matrix/simple_vector.cpp	/^    void CV::sub(CV& result, const CV& cv1, const CV& cv2) {$/;"	f	class:nikfemm::CV	typeref:typename:void
subdomains	lib/nikfemm/lib/triangle/showme.c	/^int subdomains[2];$/;"	v	typeref:typename:int[2]
subseg	lib/nikfemm/lib/triangle/triangle.cpp	/^typedef REAL **subseg;                  \/* Really:  typedef subseg *subseg   *\/$/;"	t	typeref:typename:REAL **	file:
subsegbytes	lib/nikfemm/lib/triangle/triangle.cpp	/^int subsegbytes;$/;"	v	typeref:typename:int
subsegcopy	lib/nikfemm/lib/triangle/triangle.cpp	/^#define subsegcopy(/;"	d	file:
subsegdest	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex subsegorg, subsegdest;                         \/* Its two vertices. *\/$/;"	m	struct:badsubseg	typeref:typename:vertex	file:
subsegequal	lib/nikfemm/lib/triangle/triangle.cpp	/^#define subsegequal(/;"	d	file:
subsegloop	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub subsegloop;$/;"	v	typeref:struct:osub
subsegmark	lib/nikfemm/lib/triangle/triangle.cpp	/^int subsegmark;                            \/* Marker for the new subsegment. *\/$/;"	v	typeref:typename:int
subsegorg	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex subsegorg, subsegdest;                         \/* Its two vertices. *\/$/;"	m	struct:badsubseg	typeref:typename:vertex	file:
subsegs	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct memorypool subsegs;$/;"	m	struct:mesh	typeref:struct:memorypool	file:
success	lib/nikfemm/lib/triangle/triangle.cpp	/^  enum insertvertexresult success;$/;"	v	typeref:enum:insertvertexresult
sweepline	lib/nikfemm/lib/triangle/triangle.cpp	/^  int incremental, sweepline, dwyer;$/;"	m	struct:behavior	typeref:typename:int	file:
sym	lib/nikfemm/lib/triangle/triangle.cpp	/^#define sym(/;"	d	file:
symself	lib/nikfemm/lib/triangle/triangle.cpp	/^#define symself(/;"	d	file:
syntax	lib/nikfemm/lib/triangle/showme.c	/^void syntax()$/;"	f	typeref:typename:void
syntax	lib/nikfemm/lib/triangle/triangle.cpp	/^void syntax()$/;"	f	typeref:typename:void
t	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *t;$/;"	v	typeref:struct:otri *
t0	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL s0, t0;$/;"	v	typeref:typename:REAL
t1	lib/nikfemm/lib/triangle/triangle.cpp	/^  INEXACT REAL s1, t1;$/;"	v	typeref:typename:INEXACT REAL
tapex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex tdest, tapex;$/;"	v	typeref:typename:vertex
tapex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex torg, tdest, tapex;$/;"	v	typeref:typename:vertex
tapex	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex tapex;$/;"	v	typeref:typename:vertex
tdest	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex tdest, tapex;$/;"	v	typeref:typename:vertex
tdest	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex torg, tdest, tapex;$/;"	v	typeref:typename:vertex
tdest	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex torg, tdest;$/;"	v	typeref:typename:vertex
tdest	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex tdest;$/;"	v	typeref:typename:vertex
temp	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex temp;$/;"	v	typeref:typename:vertex
tempedge	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri tempedge;$/;"	v	typeref:struct:otri
testsub	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub testsub;$/;"	v	typeref:struct:osub
testsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^struct osub *testsubseg;$/;"	v	typeref:struct:osub *
testsym	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub testsym;$/;"	v	typeref:struct:osub
testtri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri testtri;$/;"	v	typeref:struct:otri
testtri	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *testtri;$/;"	v	typeref:struct:otri *
testvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex testvertex;$/;"	v	typeref:typename:vertex
thisevent	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct event *thisevent;$/;"	v	typeref:struct:event *
thisvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex thisvertex;$/;"	v	typeref:typename:vertex
top	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri top;$/;"	v	typeref:struct:otri
topcasing	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri sidecasing, topcasing, outercasing;$/;"	v	typeref:struct:otri
toplcasing	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri toplcasing, toprcasing;$/;"	v	typeref:struct:otri
topleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri topleft, topright;$/;"	v	typeref:struct:otri
toplsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub toplsubseg, toprsubseg;$/;"	v	typeref:struct:osub
toprcasing	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri botlcasing, botrcasing, toprcasing;$/;"	v	typeref:struct:otri
toprcasing	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri toplcasing, toprcasing;$/;"	v	typeref:struct:otri
topright	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri botleft, botright, topright;$/;"	v	typeref:struct:otri
topright	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri topleft, topright;$/;"	v	typeref:struct:otri
toprsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub botlsubseg, botrsubseg, toprsubseg;$/;"	v	typeref:struct:osub
toprsubseg	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct osub toplsubseg, toprsubseg;$/;"	v	typeref:struct:osub
topvertex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex leftvertex, rightvertex, botvertex, topvertex, farvertex;$/;"	v	typeref:typename:vertex
topy	lib/nikfemm/lib/triangle/triangle.cpp	/^REAL topy;$/;"	v	typeref:typename:REAL
torg	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex torg, tdest, tapex;$/;"	v	typeref:typename:vertex
torg	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex torg, tdest;$/;"	v	typeref:typename:vertex
torg	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex torg;$/;"	v	typeref:typename:vertex
totalpopulation	lib/nikfemm/lib/triangle/triangle.cpp	/^  long population, totalpopulation;$/;"	v	typeref:typename:long
totalsamplesleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  long samplesperblock, totalsamplesleft, samplesleft;$/;"	v	typeref:typename:long
tri	lib/nikfemm/lib/triangle/triangle.cpp	/^  triangle *tri;$/;"	m	struct:otri	typeref:typename:triangle *	file:
tri	lib/nikfemm/lib/triangle/triangle.cpp	/^struct otri *tri;             \/* Edge at which to insert the new subsegment. *\/$/;"	v	typeref:struct:otri *
tri1	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri midtri, tri1, tri2, tri3;$/;"	v	typeref:struct:otri
tri1	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri tri1, tri2;$/;"	v	typeref:struct:otri
tri2	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri midtri, tri1, tri2, tri3;$/;"	v	typeref:struct:otri
tri2	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri tri1, tri2;$/;"	v	typeref:struct:otri
tri3	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri midtri, tri1, tri2, tri3;$/;"	v	typeref:struct:otri
triangapex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex triangorg, triangdest, triangapex;           \/* Its three vertices. *\/$/;"	m	struct:badtriang	typeref:typename:vertex	file:
triangdest	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex triangorg, triangdest, triangapex;           \/* Its three vertices. *\/$/;"	m	struct:badtriang	typeref:typename:vertex	file:
triangle	lib/nikfemm/lib/triangle/triangle.cpp	/^typedef REAL **triangle;            \/* Really:  typedef triangle *triangle   *\/$/;"	t	typeref:typename:REAL **	file:
trianglearealist	lib/nikfemm/lib/triangle/triangle.cpp	/^REAL *trianglearealist;$/;"	v	typeref:typename:REAL *
trianglearealist	lib/nikfemm/lib/triangle/triangle.h	/^  TRI_REAL *trianglearealist;                                         \/* In only *\/$/;"	m	struct:triangulateio	typeref:typename:TRI_REAL *
triangleattriblist	lib/nikfemm/lib/triangle/triangle.cpp	/^REAL *triangleattriblist;$/;"	v	typeref:typename:REAL *
triangleattributelist	lib/nikfemm/lib/triangle/triangle.h	/^  TRI_REAL *triangleattributelist;                                   \/* In \/ out *\/$/;"	m	struct:triangulateio	typeref:typename:TRI_REAL *
trianglebytes	lib/nikfemm/lib/triangle/triangle.cpp	/^int trianglebytes;$/;"	v	typeref:typename:int
trianglegc	lib/nikfemm/lib/triangle/showme.c	/^GC trianglegc;$/;"	v	typeref:typename:GC
triangleleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri triangleleft;$/;"	v	typeref:struct:otri
trianglelist	lib/nikfemm/lib/triangle/triangle.cpp	/^int *trianglelist;$/;"	v	typeref:typename:int *
trianglelist	lib/nikfemm/lib/triangle/triangle.h	/^  int *trianglelist;                                             \/* In \/ out *\/$/;"	m	struct:triangulateio	typeref:typename:int *
triangleloop	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct otri triangleloop;$/;"	v	typeref:struct:otri
triangles	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct memorypool triangles;$/;"	m	struct:mesh	typeref:struct:memorypool	file:
triangorg	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex triangorg, triangdest, triangapex;           \/* Its three vertices. *\/$/;"	m	struct:badtriang	typeref:typename:vertex	file:
triangulateio	lib/nikfemm/lib/triangle/triangle.h	/^struct triangulateio {$/;"	s
triapex	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex triorg, tridest, triapex;$/;"	v	typeref:typename:vertex
triapex	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex triapex;                               \/* The triangle's apex vertex. *\/$/;"	v	typeref:typename:vertex
tridest	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex triorg, tridest, triapex;$/;"	v	typeref:typename:vertex
tridest	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex triorg, tridest;$/;"	v	typeref:typename:vertex
tridest	lib/nikfemm/lib/triangle/triangle.cpp	/^vertex tridest;                        \/* The triangle's destination vertex. *\/$/;"	v	typeref:typename:vertex
triflaws	lib/nikfemm/lib/triangle/triangle.cpp	/^int triflaws;$/;"	v	typeref:typename:int
trilibrary	lib/nikfemm/lib/triangle/makefile	/^trilibrary: $(BIN)triangle.o $(BIN)tricall$/;"	t
triorg	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex triorg, tridest, triapex;$/;"	v	typeref:typename:vertex
triorg	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex triorg, tridest;$/;"	v	typeref:typename:vertex
triorg	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex triorg;$/;"	v	typeref:typename:vertex
trisize	lib/nikfemm/lib/triangle/triangle.cpp	/^  int trisize;$/;"	v	typeref:typename:int
trivialCircleFromPoints	lib/nikfemm/src/geometry/circle.cpp	/^    Circle Circle::trivialCircleFromPoints(std::vector<Point> points) {$/;"	f	class:nikfemm::Circle	typeref:typename:Circle
tsbond	lib/nikfemm/lib/triangle/triangle.cpp	/^#define tsbond(/;"	d	file:
tsdissolve	lib/nikfemm/lib/triangle/triangle.cpp	/^#define tsdissolve(/;"	d	file:
tspivot	lib/nikfemm/lib/triangle/triangle.cpp	/^#define tspivot(/;"	d	file:
u	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL u[4];$/;"	v	typeref:typename:REAL[4]
u3	lib/nikfemm/lib/triangle/triangle.cpp	/^  INEXACT REAL u3;$/;"	v	typeref:typename:INEXACT REAL
unallocateditems	lib/nikfemm/lib/triangle/triangle.cpp	/^  int unallocateditems;$/;"	m	struct:memorypool	typeref:typename:int	file:
undeads	lib/nikfemm/lib/triangle/triangle.cpp	/^  int undeads;    \/* Number of input vertices that don't appear in the mesh. *\/$/;"	m	struct:mesh	typeref:typename:int	file:
uninfect	lib/nikfemm/lib/triangle/triangle.cpp	/^#define uninfect(/;"	d	file:
unique_bimap	lib/nikfemm/src/unique_bimap.hpp	/^            unique_bimap() {$/;"	f	class:nikfemm::unique_bimap
unique_bimap	lib/nikfemm/src/unique_bimap.hpp	/^    class unique_bimap {$/;"	c	namespace:nikfemm
unload_inc	lib/nikfemm/lib/triangle/showme.c	/^void unload_inc(inc)$/;"	f
upperleft	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex upperleft, upperright;$/;"	v	typeref:typename:vertex
upperright	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex upperleft, upperright;$/;"	v	typeref:typename:vertex
upwin	lib/nikfemm/lib/triangle/showme.c	/^Window upwin;$/;"	v	typeref:typename:Window
usertest	lib/nikfemm/lib/triangle/triangle.cpp	/^  int poly, refine, quality, vararea, fixedarea, usertest;$/;"	m	struct:behavior	typeref:typename:int	file:
usesegments	lib/nikfemm/lib/triangle/triangle.cpp	/^  int usesegments;$/;"	m	struct:behavior	typeref:typename:int	file:
val	lib/nikfemm/src/matrix/coo.hpp	/^        double val;$/;"	m	struct:nikfemm::ElemCOO	typeref:typename:double
val	lib/nikfemm/src/matrix/simple_vector.hpp	/^        double* val;$/;"	m	struct:nikfemm::CV	typeref:typename:double *
vararea	lib/nikfemm/lib/triangle/triangle.cpp	/^  int poly, refine, quality, vararea, fixedarea, usertest;$/;"	m	struct:behavior	typeref:typename:int	file:
vedgefilename	lib/nikfemm/lib/triangle/showme.c	/^char vedgefilename[2][FILENAMESIZE];$/;"	v	typeref:typename:char[2][]
vedgefilename	lib/nikfemm/lib/triangle/triangle.cpp	/^  char vedgefilename[FILENAMESIZE];$/;"	m	struct:behavior	typeref:typename:char[]	file:
vedgeptr	lib/nikfemm/lib/triangle/showme.c	/^int *vedgeptr[2];$/;"	v	typeref:typename:int * [2]
vedges	lib/nikfemm/lib/triangle/showme.c	/^int vedges[2];$/;"	v	typeref:typename:int[2]
verbose	lib/nikfemm/lib/triangle/triangle.cpp	/^  int quiet, verbose;$/;"	m	struct:behavior	typeref:typename:int	file:
versionminuswin	lib/nikfemm/lib/triangle/showme.c	/^Window versionminuswin;$/;"	v	typeref:typename:Window
versionpluswin	lib/nikfemm/lib/triangle/showme.c	/^Window versionpluswin;$/;"	v	typeref:typename:Window
vertex	lib/nikfemm/lib/triangle/triangle.cpp	/^typedef REAL *vertex;$/;"	t	typeref:typename:REAL *	file:
vertex2tri	lib/nikfemm/lib/triangle/triangle.cpp	/^#define vertex2tri(/;"	d	file:
vertex2triindex	lib/nikfemm/lib/triangle/triangle.cpp	/^  int vertex2triindex;     \/* Index to find a triangle adjacent to a vertex. *\/$/;"	m	struct:mesh	typeref:typename:int	file:
vertexarray	lib/nikfemm/lib/triangle/triangle.cpp	/^  triangle *vertexarray;$/;"	v	typeref:typename:triangle *
vertexindex	lib/nikfemm/lib/triangle/triangle.cpp	/^  int vertexindex;$/;"	v	typeref:typename:int
vertexloop	lib/nikfemm/lib/triangle/triangle.cpp	/^  vertex vertexloop;$/;"	v	typeref:typename:vertex
vertexmark	lib/nikfemm/lib/triangle/triangle.cpp	/^#define vertexmark(/;"	d	file:
vertexmarkindex	lib/nikfemm/lib/triangle/triangle.cpp	/^  int vertexmarkindex;         \/* Index to find boundary marker of a vertex. *\/$/;"	m	struct:mesh	typeref:typename:int	file:
vertexsize	lib/nikfemm/lib/triangle/triangle.cpp	/^  int vertexsize;$/;"	v	typeref:typename:int
vertextype	lib/nikfemm/lib/triangle/triangle.cpp	/^#define vertextype(/;"	d	file:
vertices	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct memorypool vertices;$/;"	m	struct:mesh	typeref:struct:memorypool	file:
vertices	lib/nikfemm/lib/triangle/triangle.cpp	/^int vertices;$/;"	v	typeref:typename:int
vertices	lib/nikfemm/src/mesh/mesh.hpp	/^        std::vector<Vertex*> vertices;$/;"	m	struct:nikfemm::Mesh	typeref:typename:std::vector<Vertex * >
viri	lib/nikfemm/lib/triangle/triangle.cpp	/^  struct memorypool viri;$/;"	m	struct:mesh	typeref:struct:memorypool	file:
vnode_dim	lib/nikfemm/lib/triangle/showme.c	/^int vnodes[2], vnode_dim[2];$/;"	v	typeref:typename:int[2]
vnodefilename	lib/nikfemm/lib/triangle/showme.c	/^char vnodefilename[2][FILENAMESIZE];$/;"	v	typeref:typename:char[2][]
vnodefilename	lib/nikfemm/lib/triangle/triangle.cpp	/^  char vnodefilename[FILENAMESIZE];$/;"	m	struct:behavior	typeref:typename:char[]	file:
vnodeptr	lib/nikfemm/lib/triangle/showme.c	/^REAL *vnodeptr[2];$/;"	v	typeref:typename:REAL * [2]
vnodes	lib/nikfemm/lib/triangle/showme.c	/^int vnodes[2], vnode_dim[2];$/;"	v	typeref:typename:int[2]
vnormptr	lib/nikfemm/lib/triangle/showme.c	/^REAL *vnormptr[2];$/;"	v	typeref:typename:REAL * [2]
volatile	build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
voronoi	lib/nikfemm/lib/triangle/triangle.cpp	/^  int edgesout, voronoi, neighbors, geomview;$/;"	m	struct:behavior	typeref:typename:int	file:
voronoiwin	lib/nikfemm/lib/triangle/showme.c	/^Window voronoiwin[2];$/;"	v	typeref:typename:Window[2]
weighted	lib/nikfemm/lib/triangle/triangle.cpp	/^  int regionattrib, convex, weighted, jettison;$/;"	m	struct:behavior	typeref:typename:int	file:
welzlHelper	lib/nikfemm/src/geometry/circle.cpp	/^    Circle Circle::welzlHelper(std::vector<Point> points, std::vector<Point> R, uint64_t n) {$/;"	f	class:nikfemm::Circle	typeref:typename:Circle
white	lib/nikfemm/lib/triangle/showme.c	/^int black, white;$/;"	v	typeref:typename:int
width	lib/nikfemm/lib/triangle/showme.c	/^int width, height;$/;"	v	typeref:typename:int
width	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL width;$/;"	v	typeref:typename:REAL
widthminuswin	lib/nikfemm/lib/triangle/showme.c	/^Window widthminuswin;$/;"	v	typeref:typename:Window
widthpluswin	lib/nikfemm/lib/triangle/showme.c	/^Window widthpluswin;$/;"	v	typeref:typename:Window
windowdepth	lib/nikfemm/lib/triangle/showme.c	/^int windowdepth;$/;"	v	typeref:typename:int
workstring	lib/nikfemm/lib/triangle/triangle.cpp	/^  char workstring[FILENAMESIZE];$/;"	v	typeref:typename:char[]
write_to_file	lib/nikfemm/src/matrix/csr.cpp	/^    void MatCSR::write_to_file(const char *filename) {$/;"	f	class:nikfemm::MatCSR	typeref:typename:void
write_to_file	lib/nikfemm/src/matrix/simple_vector.cpp	/^    void CV::write_to_file(const char *filename) {$/;"	f	class:nikfemm::CV	typeref:typename:void
x	lib/nikfemm/src/geometry/point.hpp	/^            double x;$/;"	m	class:nikfemm::Point	typeref:typename:double
x	lib/nikfemm/src/geometry/vector.hpp	/^        double x;$/;"	m	struct:nikfemm::Vector	typeref:typename:double
xab	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xac, yac, xbc, ybc, xab, yab;$/;"	v	typeref:typename:REAL
xac	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xac, yac, xbc, ybc, xab, yab;$/;"	v	typeref:typename:REAL
xac	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xac, yac, xbc, ybc;$/;"	v	typeref:typename:REAL
xao	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xdo, ydo, xao, yao;$/;"	v	typeref:typename:REAL
xbc	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xac, yac, xbc, ybc, xab, yab;$/;"	v	typeref:typename:REAL
xbc	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xac, yac, xbc, ybc;$/;"	v	typeref:typename:REAL
xdo	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xdo, ydo, xao, yao;$/;"	v	typeref:typename:REAL
xhi	lib/nikfemm/lib/triangle/showme.c	/^REAL xhi[2][IMAGE_TYPES], yhi[2][IMAGE_TYPES];$/;"	v	typeref:typename:REAL[2][]
xi	lib/nikfemm/lib/triangle/triangle.cpp	/^REAL *xi;$/;"	v	typeref:typename:REAL *
xkey	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xkey, ykey;                              \/* Coordinates of the event. *\/$/;"	m	struct:event	typeref:typename:REAL	file:
xlo	lib/nikfemm/lib/triangle/showme.c	/^REAL xlo[2][IMAGE_TYPES], ylo[2][IMAGE_TYPES];$/;"	v	typeref:typename:REAL[2][]
xmax	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xmin, xmax, ymin, ymax;                            \/* x and y bounds. *\/$/;"	m	struct:mesh	typeref:typename:REAL	file:
xmin	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xmin, xmax, ymin, ymax;                            \/* x and y bounds. *\/$/;"	m	struct:mesh	typeref:typename:REAL	file:
xminextreme	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xminextreme;      \/* Nonexistent x value used as a flag in sweepline. *\/$/;"	m	struct:mesh	typeref:typename:REAL	file:
xoffset	lib/nikfemm/lib/triangle/showme.c	/^REAL xoffset, yoffset;$/;"	v	typeref:typename:REAL
xscale	lib/nikfemm/lib/triangle/showme.c	/^REAL xscale, yscale;$/;"	v	typeref:typename:REAL
y	lib/nikfemm/src/geometry/point.hpp	/^            double y;$/;"	m	class:nikfemm::Point	typeref:typename:double
y	lib/nikfemm/src/geometry/vector.hpp	/^        double y;$/;"	m	struct:nikfemm::Vector	typeref:typename:double
yab	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xac, yac, xbc, ybc, xab, yab;$/;"	v	typeref:typename:REAL
yac	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xac, yac, xbc, ybc, xab, yab;$/;"	v	typeref:typename:REAL
yac	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xac, yac, xbc, ybc;$/;"	v	typeref:typename:REAL
yao	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xdo, ydo, xao, yao;$/;"	v	typeref:typename:REAL
ybc	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xac, yac, xbc, ybc, xab, yab;$/;"	v	typeref:typename:REAL
ybc	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xac, yac, xbc, ybc;$/;"	v	typeref:typename:REAL
ydo	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xdo, ydo, xao, yao;$/;"	v	typeref:typename:REAL
yhi	lib/nikfemm/lib/triangle/showme.c	/^REAL xhi[2][IMAGE_TYPES], yhi[2][IMAGE_TYPES];$/;"	v	typeref:typename:REAL[2][]
ykey	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xkey, ykey;                              \/* Coordinates of the event. *\/$/;"	m	struct:event	typeref:typename:REAL	file:
ylo	lib/nikfemm/lib/triangle/showme.c	/^REAL xlo[2][IMAGE_TYPES], ylo[2][IMAGE_TYPES];$/;"	v	typeref:typename:REAL[2][]
ymax	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xmin, xmax, ymin, ymax;                            \/* x and y bounds. *\/$/;"	m	struct:mesh	typeref:typename:REAL	file:
ymin	lib/nikfemm/lib/triangle/triangle.cpp	/^  REAL xmin, xmax, ymin, ymax;                            \/* x and y bounds. *\/$/;"	m	struct:mesh	typeref:typename:REAL	file:
yoffset	lib/nikfemm/lib/triangle/showme.c	/^REAL xoffset, yoffset;$/;"	v	typeref:typename:REAL
yscale	lib/nikfemm/lib/triangle/showme.c	/^REAL xscale, yscale;$/;"	v	typeref:typename:REAL
zoom	lib/nikfemm/lib/triangle/showme.c	/^int zoom;$/;"	v	typeref:typename:int
~CV	lib/nikfemm/src/matrix/simple_vector.cpp	/^    CV::~CV() {$/;"	f	class:nikfemm::CV
~Drawing	lib/nikfemm/src/drawing/drawing.cpp	/^    Drawing::~Drawing() {$/;"	f	class:nikfemm::Drawing
~DrawingRegion	lib/nikfemm/src/drawing/drawing_region.cpp	/^    DrawingRegion::~DrawingRegion() {$/;"	f	class:nikfemm::DrawingRegion
~MatCOO	lib/nikfemm/src/matrix/coo.cpp	/^    MatCOO::~MatCOO() {$/;"	f	class:nikfemm::MatCOO
~MatCSR	lib/nikfemm/src/matrix/csr.cpp	/^    MatCSR::~MatCSR() {$/;"	f	class:nikfemm::MatCSR
~Mesh	lib/nikfemm/src/mesh/mesh.cpp	/^    Mesh::~Mesh() {$/;"	f	class:nikfemm::Mesh
~Point	lib/nikfemm/src/geometry/point.cpp	/^    Point::~Point() {$/;"	f	class:nikfemm::Point
~Simulation	lib/nikfemm/src/simulation.cpp	/^    Simulation::~Simulation() {$/;"	f	class:nikfemm::Simulation
~Vertex	lib/nikfemm/src/mesh/vertex.cpp	/^    Vertex::~Vertex() {$/;"	f	class:nikfemm::Vertex
~unique_bimap	lib/nikfemm/src/unique_bimap.hpp	/^            ~unique_bimap() {$/;"	f	class:nikfemm::unique_bimap
